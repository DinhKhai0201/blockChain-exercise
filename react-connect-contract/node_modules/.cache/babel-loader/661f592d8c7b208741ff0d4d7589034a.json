{"ast":null,"code":"import web3cur from './web3';\nconst address = '0x22b6acd52a80540260376236d904e20b5b889246';\nconst abi = [{\n  \"constant\": false,\n  \"inputs\": [{\n    \"name\": \"x\",\n    \"type\": \"string\"\n  }],\n  \"name\": \"sendHash\",\n  \"outputs\": [],\n  \"payable\": false,\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}, {\n  \"constant\": true,\n  \"inputs\": [],\n  \"name\": \"getHash\",\n  \"outputs\": [{\n    \"name\": \"x\",\n    \"type\": \"string\"\n  }],\n  \"payable\": false,\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}];\nconst contract = new web3cur.eth.contract(abi, address, {\n  gasPrice: 10000000000\n});\nconsole.log(contract.methods);\nweb3cur.eth.getAccounts(function (err, result) {\n  if (!err) {\n    console.log(\"getAccounts: \", result);\n  }\n});\nweb3cur.eth.getProtocolVersion(console.log);\nweb3cur.eth.isSyncing(console.log);\nweb3cur.eth.getCoinbase(function (err, getCoinbase) {\n  if (!err) {\n    console.log(\"getCoinbase: \", getCoinbase);\n  }\n});\nweb3cur.eth.getHashrate(console.log);\nweb3cur.eth.getBalance(\"0x58258c78311b8ddEaD8650Ac1ab60F681FC5De43\", (err, wei) => {\n  console.log(wei);\n}); // web3cur.eth.sendTransaction({\n//     from: '0xD6C23efb8c399dd7369CA490B4efAD86C8c885F3',\n//     to: '0x7BdFBE40673e500D664455a177FFe2db3aD1eeE7',\n//     value: '1000000000000000',\n//     gasPrice: '100000000000'\n// }, function(err, success) {\n//   if (!err) {\n//     console.log(\"success\")\n//   }\n// })\n\ncontract.methods.sendHash(\"hello\").call({\n  from: '0x58258c78311b8ddEaD8650Ac1ab60F681FC5De43'\n}, function (err, result) {\n  console.log(\"sendhash\");\n});\ncontract.methods.getHash().call({\n  from: '0x58258c78311b8ddEaD8650Ac1ab60F681FC5De43'\n}, function (err, result) {\n  console.log(\"gethash\");\n});\nexport default contract;","map":{"version":3,"sources":["/home/kai/train blockchain/ipfs/src/storehash.js"],"names":["web3cur","address","abi","contract","eth","gasPrice","console","log","methods","getAccounts","err","result","getProtocolVersion","isSyncing","getCoinbase","getHashrate","getBalance","wei","sendHash","call","from","getHash"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,QAApB;AAEA,MAAMC,OAAO,GAAG,4CAAhB;AACA,MAAMC,GAAG,GAAG,CAAC;AAAC,cAAW,KAAZ;AAAkB,YAAS,CAAC;AAAC,YAAO,GAAR;AAAY,YAAO;AAAnB,GAAD,CAA3B;AAA0D,UAAO,UAAjE;AAA4E,aAAU,EAAtF;AAAyF,aAAU,KAAnG;AAAyG,qBAAkB,YAA3H;AAAwI,UAAO;AAA/I,CAAD,EAA4J;AAAC,cAAW,IAAZ;AAAiB,YAAS,EAA1B;AAA6B,UAAO,SAApC;AAA8C,aAAU,CAAC;AAAC,YAAO,GAAR;AAAY,YAAO;AAAnB,GAAD,CAAxD;AAAuF,aAAU,KAAjG;AAAuG,qBAAkB,MAAzH;AAAgI,UAAO;AAAvI,CAA5J,CAAZ;AACA,MAAMC,QAAQ,GAAG,IAAIH,OAAO,CAACI,GAAR,CAAYD,QAAhB,CAAyBD,GAAzB,EAA8BD,OAA9B,EAAsC;AAAEI,EAAAA,QAAQ,EAAE;AAAZ,CAAtC,CAAjB;AACAC,OAAO,CAACC,GAAR,CAAYJ,QAAQ,CAACK,OAArB;AACAR,OAAO,CAACI,GAAR,CAAYK,WAAZ,CAAwB,UAASC,GAAT,EAAcC,MAAd,EAAsB;AAC5C,MAAI,CAACD,GAAL,EAAU;AACRJ,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA4BI,MAA5B;AACD;AACF,CAJD;AAKAX,OAAO,CAACI,GAAR,CAAYQ,kBAAZ,CAA+BN,OAAO,CAACC,GAAvC;AACAP,OAAO,CAACI,GAAR,CAAYS,SAAZ,CAAsBP,OAAO,CAACC,GAA9B;AACAP,OAAO,CAACI,GAAR,CAAYU,WAAZ,CAAwB,UAASJ,GAAT,EAAcI,WAAd,EAA2B;AACjD,MAAI,CAACJ,GAAL,EAAU;AACRJ,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA4BO,WAA5B;AACD;AACF,CAJD;AAKAd,OAAO,CAACI,GAAR,CAAYW,WAAZ,CAAwBT,OAAO,CAACC,GAAhC;AACAP,OAAO,CAACI,GAAR,CAAYY,UAAZ,CAAuB,4CAAvB,EAAqE,CAACN,GAAD,EAAMO,GAAN,KAAc;AAC3EX,EAAAA,OAAO,CAACC,GAAR,CAAYU,GAAZ;AACH,CAFL,E,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAd,QAAQ,CAACK,OAAT,CAAiBU,QAAjB,CAA0B,OAA1B,EAAmCC,IAAnC,CAAwC;AAACC,EAAAA,IAAI,EAAE;AAAP,CAAxC,EAA6F,UAASV,GAAT,EAAcC,MAAd,EAAsB;AACjHL,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACD,CAFD;AAGAJ,QAAQ,CAACK,OAAT,CAAiBa,OAAjB,GAA2BF,IAA3B,CAAgC;AAACC,EAAAA,IAAI,EAAE;AAAP,CAAhC,EAAqF,UAASV,GAAT,EAAcC,MAAd,EAAsB;AACzGL,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD,CAFD;AAGA,eAAeJ,QAAf","sourcesContent":["import web3cur from './web3';\n\nconst address = '0x22b6acd52a80540260376236d904e20b5b889246';\nconst abi = [{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"string\"}],\"name\":\"sendHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHash\",\"outputs\":[{\"name\":\"x\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]\nconst contract = new web3cur.eth.contract(abi, address,{ gasPrice: 10000000000 });\nconsole.log(contract.methods)\nweb3cur.eth.getAccounts(function(err, result) {\n  if (!err) {\n    console.log(\"getAccounts: \",result)\n  } \n});\nweb3cur.eth.getProtocolVersion(console.log)\nweb3cur.eth.isSyncing(console.log)\nweb3cur.eth.getCoinbase(function(err, getCoinbase) {\n  if (!err) {\n    console.log(\"getCoinbase: \",getCoinbase)\n  }\n})\nweb3cur.eth.getHashrate(console.log)\nweb3cur.eth.getBalance(\"0x58258c78311b8ddEaD8650Ac1ab60F681FC5De43\", (err, wei) => {\n        console.log(wei);\n    });\n// web3cur.eth.sendTransaction({\n//     from: '0xD6C23efb8c399dd7369CA490B4efAD86C8c885F3',\n//     to: '0x7BdFBE40673e500D664455a177FFe2db3aD1eeE7',\n//     value: '1000000000000000',\n//     gasPrice: '100000000000'\n// }, function(err, success) {\n//   if (!err) {\n//     console.log(\"success\")\n//   }\n// })\ncontract.methods.sendHash(\"hello\").call({from: '0x58258c78311b8ddEaD8650Ac1ab60F681FC5De43'},function(err, result) {\n  console.log(\"sendhash\")\n})\ncontract.methods.getHash().call({from: '0x58258c78311b8ddEaD8650Ac1ab60F681FC5De43'},function(err, result) {\n  console.log(\"gethash\")\n})\nexport default contract"]},"metadata":{},"sourceType":"module"}