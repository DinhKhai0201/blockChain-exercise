{"ast":null,"code":"//imports the Web3 API\nimport Web3 from 'web3';\n/**\n * creates & exports new instance for \n * Web3 using provided service by Metamask.\n */\n\nconst rpcURL = \"https://ropsten.infura.io/v3/cf658270146645bca881f8a7d4752099\"; // Your RCP URL goes here\n\nvar web3;\nwindow.addEventListener('load', async () => {\n  if (typeof web3 == 'undefined') {\n    await window.ethereum.enable(); // Acccounts now exposed\n\n    web3 = new Web3(web3.currentProvider);\n    console.log(\"enable\");\n  } else {\n    console.log(\"aaaa\"); // set the provider you want from Web3.providers\n\n    web3 = new Web3(new Web3.providers.HttpProvider(rpcURL));\n  } // if (window.ethereum === 'undefined') {\n  //     let instance = new Web3(window.ethereum);\n  // try {\n  //     // Request account access if needed\n  //     await window.ethereum.enable();\n  //     // Acccounts now exposed\n  //     web3 = instance;\n  //     console.log(\"enable\");\n  // } catch (error) {\n  //     // User denied account access...\n  //     alert('Please allow access for the app to work');\n  // }\n  // } else if (window.web3) {\n  //     web3 = new Web3(web3.currentProvider);\n  //     console.log(\"Metamask\");\n  //     // Acccounts always exposed\n  // }\n  // else {\n  //     web3 = new Web3(new Web3.providers.HttpProvider(rpcURL));\n  //     console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n  // }\n\n});\nweb3.eth.getBalance(web3.eth.accounts[0], function (error, result) {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log(web3.fromWei(result.toNumber()));\n  }\n});\nconsole.log(web3);\nexport default web3;","map":{"version":3,"sources":["/home/kai/train blockchain/ipfs/src/web3.js"],"names":["Web3","rpcURL","web3","window","addEventListener","ethereum","enable","currentProvider","console","log","providers","HttpProvider","eth","getBalance","accounts","error","result","fromWei","toNumber"],"mappings":"AAAA;AACA,OAAOA,IAAP,MAAiB,MAAjB;AAEA;;;;;AAKA,MAAMC,MAAM,GAAG,+DAAf,C,CAA+E;;AAE/E,IAAIC,IAAJ;AACAC,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AACxC,MAAI,OAAOF,IAAP,IAAe,WAAnB,EAAgC;AAC5B,UAAMC,MAAM,CAACE,QAAP,CAAgBC,MAAhB,EAAN,CAD4B,CAE5B;;AACCJ,IAAAA,IAAI,GAAG,IAAIF,IAAJ,CAASE,IAAI,CAACK,eAAd,CAAP;AACDC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AAEH,GAND,MAMO;AACHD,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EADG,CAEH;;AACAP,IAAAA,IAAI,GAAG,IAAIF,IAAJ,CAAS,IAAIA,IAAI,CAACU,SAAL,CAAeC,YAAnB,CAAgCV,MAAhC,CAAT,CAAP;AACH,GAXuC,CAYxC;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACH,CAjCD;AAkCAC,IAAI,CAACU,GAAL,CAASC,UAAT,CAAoBX,IAAI,CAACU,GAAL,CAASE,QAAT,CAAkB,CAAlB,CAApB,EAA0C,UAASC,KAAT,EAAgBC,MAAhB,EAAuB;AAC7D,MAAID,KAAJ,EAAW;AACPP,IAAAA,OAAO,CAACO,KAAR,CAAcA,KAAd;AACH,GAFD,MAEO;AACHP,IAAAA,OAAO,CAACC,GAAR,CAAYP,IAAI,CAACe,OAAL,CAAaD,MAAM,CAACE,QAAP,EAAb,CAAZ;AACH;AACJ,CAND;AAOAV,OAAO,CAACC,GAAR,CAAYP,IAAZ;AACA,eAAeA,IAAf","sourcesContent":["//imports the Web3 API\nimport Web3 from 'web3';\n\n/**\n * creates & exports new instance for \n * Web3 using provided service by Metamask.\n */\n\nconst rpcURL = \"https://ropsten.infura.io/v3/cf658270146645bca881f8a7d4752099\" // Your RCP URL goes here\n\nvar web3;\nwindow.addEventListener('load', async () => {\n    if (typeof web3 == 'undefined') {\n        await window.ethereum.enable();\n        // Acccounts now exposed\n         web3 = new Web3(web3.currentProvider);\n        console.log(\"enable\");\n       \n    } else {\n        console.log(\"aaaa\");\n        // set the provider you want from Web3.providers\n        web3 = new Web3(new Web3.providers.HttpProvider(rpcURL));\n    }\n    // if (window.ethereum === 'undefined') {\n    //     let instance = new Web3(window.ethereum);\n        // try {\n        //     // Request account access if needed\n        //     await window.ethereum.enable();\n        //     // Acccounts now exposed\n        //     web3 = instance;\n        //     console.log(\"enable\");\n        // } catch (error) {\n        //     // User denied account access...\n        //     alert('Please allow access for the app to work');\n        // }\n    // } else if (window.web3) {\n    //     web3 = new Web3(web3.currentProvider);\n    //     console.log(\"Metamask\");\n    //     // Acccounts always exposed\n    // }\n    // else {\n    //     web3 = new Web3(new Web3.providers.HttpProvider(rpcURL));\n    //     console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    // }\n});\nweb3.eth.getBalance(web3.eth.accounts[0], function(error, result){\n    if (error) {\n        console.error(error)\n    } else {\n        console.log(web3.fromWei(result.toNumber()));\n    }\n});\nconsole.log(web3);\nexport default web3;"]},"metadata":{},"sourceType":"module"}