{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst ConcatStream = require('concat-stream');\n\nconst once = require('once');\n\nconst isStream = require('is-stream');\n\nconst isString = require('lodash/isString');\n\nconst isSource = require('is-pull-stream').isSource;\n\nconst FileResultStreamConverter = require('../utils/file-result-stream-converter');\n\nconst SendFilesStream = require('../utils/send-files-stream');\n\nmodule.exports = send => {\n  const createAddStream = SendFilesStream(send, 'add');\n  const add = promisify((_files, options, _callback) => {\n    if (typeof options === 'function') {\n      _callback = options;\n      options = null;\n    }\n\n    const callback = once(_callback);\n\n    if (!options) {\n      options = {};\n    }\n\n    options.converter = FileResultStreamConverter; // Buffer, pull stream or Node.js stream\n\n    const isBufferOrStream = obj => Buffer.isBuffer(obj) || isStream.readable(obj) || isSource(obj); // An object like { content?, path? }, where content isBufferOrStream and path isString\n\n\n    const isContentObject = obj => {\n      if (typeof obj !== 'object') return false; // path is optional if content is present\n\n      if (obj.content) return isBufferOrStream(obj.content); // path must be a non-empty string if no content\n\n      return Boolean(obj.path) && isString(obj.path);\n    }; // An input atom: a buffer, stream or content object\n\n\n    const isInput = obj => isBufferOrStream(obj) || isContentObject(obj); // All is ok if data isInput or data is an array of isInput\n\n\n    const ok = isInput(_files) || Array.isArray(_files) && _files.every(isInput);\n\n    if (!ok) {\n      return callback(new Error('invalid input: expected buffer, readable stream, pull stream, object or array of objects'));\n    }\n\n    const files = [].concat(_files);\n    const stream = createAddStream({\n      qs: options\n    });\n    const concat = ConcatStream(result => callback(null, result));\n    stream.once('error', callback);\n    stream.pipe(concat);\n    files.forEach(file => stream.write(file));\n    stream.end();\n  });\n  return function () {\n    const args = Array.from(arguments); // If we files.add(<pull stream>), then promisify thinks the pull stream is\n    // a callback! Add an empty options object in this case so that a promise\n    // is returned.\n\n    if (args.length === 1 && isSource(args[0])) {\n      args.push({});\n    }\n\n    return add.apply(null, args);\n  };\n};","map":null,"metadata":{},"sourceType":"script"}