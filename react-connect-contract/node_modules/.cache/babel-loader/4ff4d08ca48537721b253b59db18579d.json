{"ast":null,"code":"import Web3 from 'web3';\n\nclass Web3Service {\n  constructor() {\n    if (Web3Service.instance) {\n      return Web3Service.instance;\n    }\n\n    Web3Service.instance = this;\n    this.web3 = null;\n    this.getWeb3().then(results => {\n      this.web3 = results.web3;\n    });\n  }\n\n  getWeb3() {\n    return new Promise(function (resolve, reject) {\n      // Wait for loading completion to avoid race conditions with web3 injection timing.\n      window.addEventListener('load', async function () {\n        var results;\n        var web3 = window.web3; // Checking if Web3 has been injected by the browser (Mist/MetaMask)\n\n        if (typeof web3 !== 'undefined') {\n          // Use Mist/MetaMask's provider.\n          await window.ethereum.enable();\n          web3 = new Web3(window.web3.currentProvider);\n          results = {\n            web3: web3\n          };\n          console.log('Injected web3 detected.');\n          resolve(results);\n        } else {\n          // Fallback to localhost if no web3 injection.\n          var provider = new Web3.providers.HttpProvider('http://localhost:8545');\n          web3 = new Web3(provider);\n          results = {\n            web3: web3\n          };\n          console.log('No web3 instance injected, using Local web3.');\n          resolve(results);\n        }\n      });\n    });\n  }\n\n}\n\nconst web3Service = new Web3Service();\nconsole.log(web3Service);\nexport default web3Service;","map":{"version":3,"sources":["/home/kai/train blockchain/ipfs/src/web3.js"],"names":["Web3","Web3Service","constructor","instance","web3","getWeb3","then","results","Promise","resolve","reject","window","addEventListener","ethereum","enable","currentProvider","console","log","provider","providers","HttpProvider","web3Service"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,WAAN,CAAkB;AAGhBC,EAAAA,WAAW,GAAG;AACZ,QAAID,WAAW,CAACE,QAAhB,EAA0B;AACxB,aAAOF,WAAW,CAACE,QAAnB;AACD;;AAEDF,IAAAA,WAAW,CAACE,QAAZ,GAAuB,IAAvB;AAEA,SAAKC,IAAL,GAAY,IAAZ;AACA,SAAKC,OAAL,GAAeC,IAAf,CAAoBC,OAAO,IAAI;AAC7B,WAAKH,IAAL,GAAYG,OAAO,CAACH,IAApB;AACD,KAFD;AAGD;;AAEDC,EAAAA,OAAO,GAAG;AACR,WAAO,IAAIG,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAE3C;AACAC,MAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,kBAAiB;AAC/C,YAAIL,OAAJ;AACA,YAAIH,IAAI,GAAGO,MAAM,CAACP,IAAlB,CAF+C,CAI/C;;AACA,YAAI,OAAOA,IAAP,KAAgB,WAApB,EAAiC;AAC/B;AACA,gBAAMO,MAAM,CAACE,QAAP,CAAgBC,MAAhB,EAAN;AACAV,UAAAA,IAAI,GAAG,IAAIJ,IAAJ,CAASW,MAAM,CAACP,IAAP,CAAYW,eAArB,CAAP;AAEAR,UAAAA,OAAO,GAAG;AACRH,YAAAA,IAAI,EAAEA;AADE,WAAV;AAIAY,UAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AAEAR,UAAAA,OAAO,CAACF,OAAD,CAAP;AACD,SAZD,MAYO;AACL;AACA,cAAIW,QAAQ,GAAG,IAAIlB,IAAI,CAACmB,SAAL,CAAeC,YAAnB,CAAgC,uBAAhC,CAAf;AAEAhB,UAAAA,IAAI,GAAG,IAAIJ,IAAJ,CAASkB,QAAT,CAAP;AAEAX,UAAAA,OAAO,GAAG;AACRH,YAAAA,IAAI,EAAEA;AADE,WAAV;AAIAY,UAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AAEAR,UAAAA,OAAO,CAACF,OAAD,CAAP;AACD;AACF,OA/BD;AAgCD,KAnCM,CAAP;AAoCD;;AArDe;;AAwDlB,MAAMc,WAAW,GAAG,IAAIpB,WAAJ,EAApB;AACAe,OAAO,CAACC,GAAR,CAAYI,WAAZ;AACA,eAAeA,WAAf","sourcesContent":["import Web3 from 'web3'\n\nclass Web3Service {\n  static instance\n\n  constructor() {\n    if (Web3Service.instance) {\n      return Web3Service.instance\n    }\n\n    Web3Service.instance = this\n\n    this.web3 = null\n    this.getWeb3().then(results => {\n      this.web3 = results.web3\n    })\n  }\n\n  getWeb3() {\n    return new Promise(function(resolve, reject) {\n\n      // Wait for loading completion to avoid race conditions with web3 injection timing.\n      window.addEventListener('load', async function() {\n        var results\n        var web3 = window.web3\n\n        // Checking if Web3 has been injected by the browser (Mist/MetaMask)\n        if (typeof web3 !== 'undefined') {\n          // Use Mist/MetaMask's provider.\n          await window.ethereum.enable();\n          web3 = new Web3(window.web3.currentProvider)\n\n          results = {\n            web3: web3\n          };\n\n          console.log('Injected web3 detected.')\n\n          resolve(results)\n        } else {\n          // Fallback to localhost if no web3 injection.\n          var provider = new Web3.providers.HttpProvider('http://localhost:8545')\n\n          web3 = new Web3(provider)\n\n          results = {\n            web3: web3\n          };\n\n          console.log('No web3 instance injected, using Local web3.')\n\n          resolve(results)\n        }\n      })\n    })\n  }\n}\n\nconst web3Service = new Web3Service()\nconsole.log(web3Service)\nexport default web3Service"]},"metadata":{},"sourceType":"module"}