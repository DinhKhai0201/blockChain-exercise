{"ast":null,"code":"//imports the Web3 API\nimport Web3 from 'web3';\n/**\n * creates & exports new instance for \n * Web3 using provided service by Metamask.\n */\n\nconst rpcURL = \"https://ropsten.infura.io/v3/cf658270146645bca881f8a7d4752099\"; // Your RCP URL goes here\n\nvar web3;\nwindow.addEventListener('load', async () => {\n  if (window.ethereum !== 'undefined' && window.web3 !== 'undefined') {\n    var instance = window.web3;\n\n    try {\n      await window.ethereum.enable();\n      web3 = instance;\n      console.log(\"enable\");\n    } catch (error) {\n      alert('Please allow access for the app to work');\n    }\n  } else {\n    web3 = new Web3(new Web3.providers.HttpProvider(rpcURL));\n  }\n});\nconsole.log(web3);\nexport default web3;","map":{"version":3,"sources":["/home/kai/train blockchain/ipfs/src/web3.js"],"names":["Web3","rpcURL","web3","window","addEventListener","ethereum","instance","enable","console","log","error","alert","providers","HttpProvider"],"mappings":"AAAA;AACA,OAAOA,IAAP,MAAiB,MAAjB;AAEA;;;;;AAKA,MAAMC,MAAM,GAAG,+DAAf,C,CAA+E;;AAE/E,IAAIC,IAAJ;AACAC,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AACxC,MAAID,MAAM,CAACE,QAAP,KAAoB,WAApB,IAAmCF,MAAM,CAACD,IAAP,KAAgB,WAAvD,EAAoE;AAChE,QAAII,QAAQ,GAAGH,MAAM,CAACD,IAAtB;;AACA,QAAI;AACA,YAAMC,MAAM,CAACE,QAAP,CAAgBE,MAAhB,EAAN;AACAL,MAAAA,IAAI,GAAGI,QAAP;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACH,KAJD,CAIE,OAAOC,KAAP,EAAc;AACZC,MAAAA,KAAK,CAAC,yCAAD,CAAL;AACH;AACJ,GATD,MASO;AACHT,IAAAA,IAAI,GAAG,IAAIF,IAAJ,CAAS,IAAIA,IAAI,CAACY,SAAL,CAAeC,YAAnB,CAAgCZ,MAAhC,CAAT,CAAP;AACH;AACJ,CAbD;AAcAO,OAAO,CAACC,GAAR,CAAYP,IAAZ;AACA,eAAeA,IAAf","sourcesContent":["//imports the Web3 API\nimport Web3 from 'web3';\n\n/**\n * creates & exports new instance for \n * Web3 using provided service by Metamask.\n */\n\nconst rpcURL = \"https://ropsten.infura.io/v3/cf658270146645bca881f8a7d4752099\" // Your RCP URL goes here\n\nvar web3;\nwindow.addEventListener('load', async () => {\n    if (window.ethereum !== 'undefined' && window.web3 !== 'undefined') {\n        var instance = window.web3;\n        try {\n            await window.ethereum.enable();\n            web3 = instance;\n            console.log(\"enable\");\n        } catch (error) {\n            alert('Please allow access for the app to work');\n        }\n    } else {\n        web3 = new Web3(new Web3.providers.HttpProvider(rpcURL))\n    }\n});\nconsole.log(web3)\nexport default web3;"]},"metadata":{},"sourceType":"module"}