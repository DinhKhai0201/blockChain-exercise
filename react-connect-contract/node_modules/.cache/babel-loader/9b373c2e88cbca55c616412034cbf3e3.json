{"ast":null,"code":"//imports the Web3 API\nimport Web3 from 'web3';\n/**\n * creates & exports new instance for \n * Web3 using provided service by Metamask.\n */\n\nconst rpcURL = \"https://ropsten.infura.io/v3/cf658270146645bca881f8a7d4752099\"; // Your RCP URL goes here\n\nlet web3;\nwindow.addEventListener('load', async () => {\n  const metaMaskEthProvider = window.ethereum;\n\n  if (metaMaskEthProvider) {\n    console.log('Detected injected MetaMask Ethereum Provider');\n    let instance = new Web3(metaMaskEthProvider);\n    console.log('Obtained a MetaMask injected provider');\n\n    try {\n      // Request account access if needed\n      await metaMaskEthProvider.enable(); // Acccounts now exposed\n\n      web3 = instance;\n      console.log('Obtained permission to use MetaMask accounts');\n    } catch (error) {\n      // User denied account access...\n      alert('Please allow access for the app to work');\n    }\n  } else {\n    console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    web3 = new Web3(rpcURL);\n  }\n});\nexport default web3;","map":{"version":3,"sources":["/home/kai/train blockchain/ipfs/src/web3.js"],"names":["Web3","rpcURL","web3","window","addEventListener","metaMaskEthProvider","ethereum","console","log","instance","enable","error","alert"],"mappings":"AAAA;AACA,OAAOA,IAAP,MAAiB,MAAjB;AAEA;;;;;AAKA,MAAMC,MAAM,GAAG,+DAAf,C,CAA+E;;AAE/E,IAAIC,IAAJ;AACAC,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AACxC,QAAMC,mBAAmB,GAAGF,MAAM,CAACG,QAAnC;;AACA,MAAID,mBAAJ,EAAyB;AACrBE,IAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACA,QAAIC,QAAQ,GAAG,IAAIT,IAAJ,CAASK,mBAAT,CAAf;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;;AACA,QAAI;AACA;AACA,YAAMH,mBAAmB,CAACK,MAApB,EAAN,CAFA,CAGA;;AACAR,MAAAA,IAAI,GAAGO,QAAP;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACH,KAND,CAME,OAAOG,KAAP,EAAc;AACZ;AACAC,MAAAA,KAAK,CAAC,yCAAD,CAAL;AACH;AACJ,GAdD,MAcO;AACHL,IAAAA,OAAO,CAACC,GAAR,CAAY,qEAAZ;AACAN,IAAAA,IAAI,GAAG,IAAIF,IAAJ,CAASC,MAAT,CAAP;AACH;AACJ,CApBD;AAqBA,eAAeC,IAAf","sourcesContent":["//imports the Web3 API\nimport Web3 from 'web3';\n\n/**\n * creates & exports new instance for \n * Web3 using provided service by Metamask.\n */\n\nconst rpcURL = \"https://ropsten.infura.io/v3/cf658270146645bca881f8a7d4752099\" // Your RCP URL goes here\n\nlet web3;\nwindow.addEventListener('load', async () => {\n    const metaMaskEthProvider = window.ethereum;\n    if (metaMaskEthProvider) {\n        console.log('Detected injected MetaMask Ethereum Provider');\n        let instance = new Web3(metaMaskEthProvider);\n        console.log('Obtained a MetaMask injected provider');\n        try {\n            // Request account access if needed\n            await metaMaskEthProvider.enable();\n            // Acccounts now exposed\n            web3 = instance;\n            console.log('Obtained permission to use MetaMask accounts')\n        } catch (error) {\n            // User denied account access...\n            alert('Please allow access for the app to work');\n        }\n    } else {\n        console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n        web3 = new Web3(rpcURL);\n    }\n});\nexport default web3;"]},"metadata":{},"sourceType":"module"}