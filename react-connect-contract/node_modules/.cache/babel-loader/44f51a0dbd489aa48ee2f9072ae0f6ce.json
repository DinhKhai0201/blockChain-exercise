{"ast":null,"code":"import web3cur from './web3';\nimport Web3 from 'web3';\nconsole.log(web3cur);\nconst address = '0x9ba0eff6e9c206574c8ca1a9f7292b7bce4fc8ae';\nconst abi = [{\n  \"constant\": true,\n  \"inputs\": [],\n  \"name\": \"getHash\",\n  \"outputs\": [{\n    \"name\": \"x\",\n    \"type\": \"string\"\n  }],\n  \"payable\": false,\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"constant\": true,\n  \"inputs\": [],\n  \"name\": \"ipfsHash\",\n  \"outputs\": [{\n    \"name\": \"\",\n    \"type\": \"string\"\n  }],\n  \"payable\": false,\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}];\n\nlet get = async (cb = () => {}) => {\n  let web3 = await web3cur();\n  const contract = new web3.eth.Contract(abi, address, {\n    gasPrice: 10000000000\n  });\n  console.log(contract);\n  cb(contract);\n  contract.methods.ipfsHash().call({}, function (err, result) {\n    console.log(\"getHash :\", web3.utils.sha3(result));\n  });\n};\n\nget(); // web3cur.eth.getAccounts(function(err, result) {\n//   if (!err) {\n//     console.log(\"getAccounts: \",result)\n//   } \n// });\n// web3cur.eth.getProtocolVersion(console.log)\n// web3cur.eth.isSyncing(console.log)\n// web3cur.eth.getCoinbase(function(err, getCoinbase) {\n//   if (!err) {\n//     console.log(\"getCoinbase: \",getCoinbase)\n//   }\n// })\n// console.log(\"ultil\", Web3.utils.randomHex(32))\n// var BN = Web3.utils.BN;\n// console.log(\"BN to string \",new BN(1234).toString())\n// console.log(\"keccak \",Web3.utils.keccak256(\"string\"))\n// console.log(\"towei \",Web3.utils.toWei('1', 'ether'))\n// console.log(\"to ether\",Web3.utils.fromWei('1', 'ether'))\n// web3cur.eth.getHashrate(console.log)\n// web3cur.eth.getBalance(\"0x58258c78311b8ddEaD8650Ac1ab60F681FC5De43\", (err, wei) => {\n//         console.log(wei);\n//     });\n// myContract.events.MyEvent([options][, callback])\n// web3cur.eth.sendTransaction({\n//     from: '0xD6C23efb8c399dd7369CA490B4efAD86C8c885F3',\n//     to: '0x7BdFBE40673e500D664455a177FFe2db3aD1eeE7',\n//     value: '1000000000000000',\n//     gasPrice: '100000000000'\n// }, function(err, success) {\n//   if (!err) {\n//     console.log(\"success\")\n//   }\n// })\n// contract.methods.sendHash(\"hello\").send({},function(err, result) {\n//   console.log(\"sendHash :\",result)\n// })\n// contract.methods.getHash().call(function(err, result) {\n//   console.log(\"getHash: \",result)\n// })\n\nexport { get };","map":{"version":3,"sources":["/home/kai/train blockchain/ipfs/src/storehash.js"],"names":["web3cur","Web3","console","log","address","abi","get","cb","web3","contract","eth","Contract","gasPrice","methods","ipfsHash","call","err","result","utils","sha3"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,QAApB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACAC,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACA,MAAMI,OAAO,GAAG,4CAAhB;AACA,MAAMC,GAAG,GAAG,CAAC;AAAC,cAAW,IAAZ;AAAiB,YAAS,EAA1B;AAA6B,UAAO,SAApC;AAA8C,aAAU,CAAC;AAAC,YAAO,GAAR;AAAY,YAAO;AAAnB,GAAD,CAAxD;AAAuF,aAAU,KAAjG;AAAuG,qBAAkB,MAAzH;AAAgI,UAAO;AAAvI,CAAD,EAAoJ;AAAC,cAAW,IAAZ;AAAiB,YAAS,EAA1B;AAA6B,UAAO,UAApC;AAA+C,aAAU,CAAC;AAAC,YAAO,EAAR;AAAW,YAAO;AAAlB,GAAD,CAAzD;AAAuF,aAAU,KAAjG;AAAuG,qBAAkB,MAAzH;AAAgI,UAAO;AAAvI,CAApJ,CAAZ;;AAGA,IAAIC,GAAG,GAAG,OAAMC,EAAE,GAAG,MAAI,CAAE,CAAjB,KAAoB;AAC5B,MAAIC,IAAI,GAAG,MAAMR,OAAO,EAAxB;AACA,QAAMS,QAAQ,GAAG,IAAID,IAAI,CAACE,GAAL,CAASC,QAAb,CAAsBN,GAAtB,EAA2BD,OAA3B,EAAmC;AAAEQ,IAAAA,QAAQ,EAAE;AAAZ,GAAnC,CAAjB;AACAV,EAAAA,OAAO,CAACC,GAAR,CAAYM,QAAZ;AACAF,EAAAA,EAAE,CAACE,QAAD,CAAF;AACAA,EAAAA,QAAQ,CAACI,OAAT,CAAiBC,QAAjB,GAA4BC,IAA5B,CAAiC,EAAjC,EAAoC,UAASC,GAAT,EAAcC,MAAd,EAAsB;AACxDf,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBK,IAAI,CAACU,KAAL,CAAWC,IAAX,CAAgBF,MAAhB,CAAxB;AACD,GAFD;AAGD,CARD;;AASAX,GAAG,G,CAGH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SACEA,GADF","sourcesContent":["import web3cur from './web3';\nimport Web3 from 'web3';\nconsole.log(web3cur)\nconst address = '0x9ba0eff6e9c206574c8ca1a9f7292b7bce4fc8ae';\nconst abi = [{\"constant\":true,\"inputs\":[],\"name\":\"getHash\",\"outputs\":[{\"name\":\"x\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ipfsHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]\n\n\nlet get = async(cb = ()=>{})=>{\n  let web3 = await web3cur();\n  const contract = new web3.eth.Contract(abi, address,{ gasPrice: 10000000000 });\n  console.log(contract);\n  cb(contract)\n  contract.methods.ipfsHash().call({},function(err, result) {\n    console.log(\"getHash :\",web3.utils.sha3(result))\n  })\n}\nget();\n\n\n// web3cur.eth.getAccounts(function(err, result) {\n//   if (!err) {\n//     console.log(\"getAccounts: \",result)\n//   } \n// });\n// web3cur.eth.getProtocolVersion(console.log)\n// web3cur.eth.isSyncing(console.log)\n// web3cur.eth.getCoinbase(function(err, getCoinbase) {\n//   if (!err) {\n//     console.log(\"getCoinbase: \",getCoinbase)\n//   }\n// })\n// console.log(\"ultil\", Web3.utils.randomHex(32))\n// var BN = Web3.utils.BN;\n// console.log(\"BN to string \",new BN(1234).toString())\n// console.log(\"keccak \",Web3.utils.keccak256(\"string\"))\n// console.log(\"towei \",Web3.utils.toWei('1', 'ether'))\n// console.log(\"to ether\",Web3.utils.fromWei('1', 'ether'))\n// web3cur.eth.getHashrate(console.log)\n// web3cur.eth.getBalance(\"0x58258c78311b8ddEaD8650Ac1ab60F681FC5De43\", (err, wei) => {\n//         console.log(wei);\n//     });\n// myContract.events.MyEvent([options][, callback])\n\n// web3cur.eth.sendTransaction({\n//     from: '0xD6C23efb8c399dd7369CA490B4efAD86C8c885F3',\n//     to: '0x7BdFBE40673e500D664455a177FFe2db3aD1eeE7',\n//     value: '1000000000000000',\n//     gasPrice: '100000000000'\n// }, function(err, success) {\n//   if (!err) {\n//     console.log(\"success\")\n//   }\n// })\n// contract.methods.sendHash(\"hello\").send({},function(err, result) {\n//   console.log(\"sendHash :\",result)\n// })\n// contract.methods.getHash().call(function(err, result) {\n//   console.log(\"getHash: \",result)\n// })\nexport {\n  get\n}"]},"metadata":{},"sourceType":"module"}