{"ast":null,"code":"import Web3 from 'web3';\nconst address = '0x9ba0eff6e9c206574c8ca1a9f7292b7bce4fc8ae';\nconst abi = [{\n  \"constant\": true,\n  \"inputs\": [],\n  \"name\": \"getHash\",\n  \"outputs\": [{\n    \"name\": \"x\",\n    \"type\": \"string\"\n  }],\n  \"payable\": false,\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"constant\": true,\n  \"inputs\": [],\n  \"name\": \"ipfsHash\",\n  \"outputs\": [{\n    \"name\": \"\",\n    \"type\": \"string\"\n  }],\n  \"payable\": false,\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}];\nconst rpcURL = \"https://ropsten.infura.io/v3/cf658270146645bca881f8a7d4752099\"; // Your RCP URL goes here\n\nvar web3cur; // window.addEventListener('load', async () => {\n//     if (window.ethereum) {\n//         try {\n//             await window.ethereum.enable();\n//             web3cur = new Web3(window.ethereum);\n//             console.log(web3cur);\n//         } catch (error) {\n//             alert('Please allow access for the app to work');\n//         }\n//     } else if (window.web3) {\n//          web3cur = new Web3(window.web3.currentProvider);\n//         console.log(\"Metamask\");\n//         console.log(web3cur);\n//     }\n//     else {\n//         console.log(web3cur);\n//         console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n//     }\n// });\n// console.log(web3cur)\n\nwindow.addEventListener('load', async () => {\n  if (typeof window.ethereum !== 'undefined') {\n    try {\n      await window.ethereum.enable();\n      web3cur = new Web3(window.ethereum); // web3cur = \"hello\"\n\n      const contract = new web3cur.eth.Contract(abi, address, {\n        gasPrice: 10000000000\n      });\n      contract.methods.sendHash(\"hello\").send({}, function (err, result) {\n        console.log(\"sendHash :\", result);\n      });\n      console.log(\"1\", web3cur);\n    } catch (error) {\n      alert('Please allow access for the app to work');\n    }\n\n    console.log(\"Metamask\");\n  } else {\n    web3cur = new Web3(new Web3.providers.HttpProvider(rpcURL));\n    console.log(\"3\", web3cur);\n    console.log(\"NO Metamask\");\n  }\n});\nconsole.log(\"2\", web3cur);\nexport default web3cur;","map":{"version":3,"sources":["/home/kai/train blockchain/ipfs/src/web3.js"],"names":["Web3","address","abi","rpcURL","web3cur","window","addEventListener","ethereum","enable","contract","eth","Contract","gasPrice","methods","sendHash","send","err","result","console","log","error","alert","providers","HttpProvider"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,MAAMC,OAAO,GAAG,4CAAhB;AACA,MAAMC,GAAG,GAAG,CACR;AACI,cAAY,IADhB;AAEI,YAAU,EAFd;AAGI,UAAQ,SAHZ;AAII,aAAW,CACP;AACI,YAAQ,GADZ;AAEI,YAAQ;AAFZ,GADO,CAJf;AAUI,aAAW,KAVf;AAWI,qBAAmB,MAXvB;AAYI,UAAQ;AAZZ,CADQ,EAeR;AACI,cAAY,IADhB;AAEI,YAAU,EAFd;AAGI,UAAQ,UAHZ;AAII,aAAW,CACP;AACI,YAAQ,EADZ;AAEI,YAAQ;AAFZ,GADO,CAJf;AAUI,aAAW,KAVf;AAWI,qBAAmB,MAXvB;AAYI,UAAQ;AAZZ,CAfQ,CAAZ;AA8BA,MAAMC,MAAM,GAAG,+DAAf,C,CAA+E;;AAC/E,IAAIC,OAAJ,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAC,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AACxC,MAAI,OAAOD,MAAM,CAACE,QAAd,KAA2B,WAA/B,EAA4C;AACxC,QAAI;AACA,YAAMF,MAAM,CAACE,QAAP,CAAgBC,MAAhB,EAAN;AACAJ,MAAAA,OAAO,GAAG,IAAIJ,IAAJ,CAASK,MAAM,CAACE,QAAhB,CAAV,CAFA,CAGA;;AACA,YAAME,QAAQ,GAAG,IAAIL,OAAO,CAACM,GAAR,CAAYC,QAAhB,CAAyBT,GAAzB,EAA8BD,OAA9B,EAAsC;AAAEW,QAAAA,QAAQ,EAAE;AAAZ,OAAtC,CAAjB;AACAH,MAAAA,QAAQ,CAACI,OAAT,CAAiBC,QAAjB,CAA0B,OAA1B,EAAmCC,IAAnC,CAAwC,EAAxC,EAA2C,UAASC,GAAT,EAAcC,MAAd,EAAsB;AAC/DC,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBF,MAAzB;AACD,OAFD;AAGAC,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAgBf,OAAhB;AACH,KATD,CASE,OAAOgB,KAAP,EAAc;AACRC,MAAAA,KAAK,CAAC,yCAAD,CAAL;AACP;;AACDH,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACH,GAdD,MAcO;AACHf,IAAAA,OAAO,GAAG,IAAIJ,IAAJ,CAAS,IAAIA,IAAI,CAACsB,SAAL,CAAeC,YAAnB,CAAgCpB,MAAhC,CAAT,CAAV;AACAe,IAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAgBf,OAAhB;AACAc,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACC;AACJ,CApBL;AAqBAD,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAgBf,OAAhB;AACA,eAAeA,OAAf","sourcesContent":["import Web3 from 'web3';\nconst address = '0x9ba0eff6e9c206574c8ca1a9f7292b7bce4fc8ae';\nconst abi = [\n    {\n        \"constant\": true,\n        \"inputs\": [],\n        \"name\": \"getHash\",\n        \"outputs\": [\n            {\n                \"name\": \"x\",\n                \"type\": \"string\"\n            }\n        ],\n        \"payable\": false,\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"constant\": true,\n        \"inputs\": [],\n        \"name\": \"ipfsHash\",\n        \"outputs\": [\n            {\n                \"name\": \"\",\n                \"type\": \"string\"\n            }\n        ],\n        \"payable\": false,\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    }\n]\nconst rpcURL = \"https://ropsten.infura.io/v3/cf658270146645bca881f8a7d4752099\" // Your RCP URL goes here\nvar web3cur;\n// window.addEventListener('load', async () => {\n//     if (window.ethereum) {\n//         try {\n//             await window.ethereum.enable();\n//             web3cur = new Web3(window.ethereum);\n//             console.log(web3cur);\n//         } catch (error) {\n//             alert('Please allow access for the app to work');\n//         }\n//     } else if (window.web3) {\n//          web3cur = new Web3(window.web3.currentProvider);\n//         console.log(\"Metamask\");\n//         console.log(web3cur);\n//     }\n//     else {\n//         console.log(web3cur);\n//         console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n//     }\n// });\n// console.log(web3cur)\nwindow.addEventListener('load', async () => {\n    if (typeof window.ethereum !== 'undefined') {\n        try {\n            await window.ethereum.enable();\n            web3cur = new Web3(window.ethereum);\n            // web3cur = \"hello\"\n            const contract = new web3cur.eth.Contract(abi, address,{ gasPrice: 10000000000 });\n            contract.methods.sendHash(\"hello\").send({},function(err, result) {\n              console.log(\"sendHash :\",result)\n            })\n            console.log(\"1\",web3cur)\n        } catch (error) {\n                alert('Please allow access for the app to work');\n        }\n        console.log(\"Metamask\")\n    } else {\n        web3cur = new Web3(new Web3.providers.HttpProvider(rpcURL));\n        console.log(\"3\",web3cur)\n        console.log(\"NO Metamask\")\n        }\n    })\nconsole.log(\"2\",web3cur)\nexport default web3cur;"]},"metadata":{},"sourceType":"module"}