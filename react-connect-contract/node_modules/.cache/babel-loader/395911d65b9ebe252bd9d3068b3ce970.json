{"ast":null,"code":"//imports the Web3 API\nimport Web3 from 'web3';\n/**\n * creates & exports new instance for \n * Web3 using provided service by Metamask.\n */\n\nconst rpcURL = \"https://ropsten.infura.io/v3/cf658270146645bca881f8a7d4752099\"; // Your RCP URL goes here\n\nlet web3;\nwindow.addEventListener('load', async () => {\n  if (typeof web3 !== 'undefined') {\n    try {\n      // Request account access if needed\n      await window.ethereum.enable(); // Acccounts now exposed\n\n      web3 = new Web3(web3.currentProvider);\n      console.log(\"enable\");\n    } catch (error) {\n      // User denied account access...\n      alert('Please allow access for the app to work');\n    } // Mist, Metamask\n\n  } else {\n    console.log(\"aaaa\"); // set the provider you want from Web3.providers\n\n    web3 = new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\"));\n  } // if (window.ethereum === 'undefined') {\n  //     let instance = new Web3(window.ethereum);\n  // try {\n  //     // Request account access if needed\n  //     await window.ethereum.enable();\n  //     // Acccounts now exposed\n  //     web3 = instance;\n  //     console.log(\"enable\");\n  // } catch (error) {\n  //     // User denied account access...\n  //     alert('Please allow access for the app to work');\n  // }\n  // } else if (window.web3) {\n  //     web3 = new Web3(web3.currentProvider);\n  //     console.log(\"Metamask\");\n  //     // Acccounts always exposed\n  // }\n  // else {\n  //     web3 = new Web3(new Web3.providers.HttpProvider(rpcURL));\n  //     console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n  // }\n\n}); // web3.eth.getBalance(web3.eth.accounts[0], function(error, result){\n//     if (error) {\n//         console.error(error)\n//     } else {\n//         console.log(web3.fromWei(result.toNumber()));\n//     }\n// });\n\nexport default web3;","map":{"version":3,"sources":["/home/kai/train blockchain/ipfs/src/web3.js"],"names":["Web3","rpcURL","web3","window","addEventListener","ethereum","enable","currentProvider","console","log","error","alert","providers","HttpProvider"],"mappings":"AAAA;AACA,OAAOA,IAAP,MAAiB,MAAjB;AAEA;;;;;AAKA,MAAMC,MAAM,GAAG,+DAAf,C,CAA+E;;AAE/E,IAAIC,IAAJ;AACAC,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AACxC,MAAI,OAAOF,IAAP,KAAgB,WAApB,EAAiC;AAC7B,QAAI;AACA;AACA,YAAMC,MAAM,CAACE,QAAP,CAAgBC,MAAhB,EAAN,CAFA,CAGA;;AACCJ,MAAAA,IAAI,GAAG,IAAIF,IAAJ,CAASE,IAAI,CAACK,eAAd,CAAP;AACDC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACH,KAND,CAME,OAAOC,KAAP,EAAc;AACZ;AACAC,MAAAA,KAAK,CAAC,yCAAD,CAAL;AACH,KAV4B,CAW7B;;AAEH,GAbD,MAaO;AACHH,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EADG,CAEH;;AACAP,IAAAA,IAAI,GAAG,IAAIF,IAAJ,CAAS,IAAIA,IAAI,CAACY,SAAL,CAAeC,YAAnB,CAAgC,uBAAhC,CAAT,CAAP;AACH,GAlBuC,CAmBxC;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACH,CAxCD,E,CAyCA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAeX,IAAf","sourcesContent":["//imports the Web3 API\nimport Web3 from 'web3';\n\n/**\n * creates & exports new instance for \n * Web3 using provided service by Metamask.\n */\n\nconst rpcURL = \"https://ropsten.infura.io/v3/cf658270146645bca881f8a7d4752099\" // Your RCP URL goes here\n\nlet web3;\nwindow.addEventListener('load', async () => {\n    if (typeof web3 !== 'undefined') {\n        try {\n            // Request account access if needed\n            await window.ethereum.enable();\n            // Acccounts now exposed\n             web3 = new Web3(web3.currentProvider);\n            console.log(\"enable\");\n        } catch (error) {\n            // User denied account access...\n            alert('Please allow access for the app to work');\n        }\n        // Mist, Metamask\n       \n    } else {\n        console.log(\"aaaa\");\n        // set the provider you want from Web3.providers\n        web3 = new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\"));\n    }\n    // if (window.ethereum === 'undefined') {\n    //     let instance = new Web3(window.ethereum);\n        // try {\n        //     // Request account access if needed\n        //     await window.ethereum.enable();\n        //     // Acccounts now exposed\n        //     web3 = instance;\n        //     console.log(\"enable\");\n        // } catch (error) {\n        //     // User denied account access...\n        //     alert('Please allow access for the app to work');\n        // }\n    // } else if (window.web3) {\n    //     web3 = new Web3(web3.currentProvider);\n    //     console.log(\"Metamask\");\n    //     // Acccounts always exposed\n    // }\n    // else {\n    //     web3 = new Web3(new Web3.providers.HttpProvider(rpcURL));\n    //     console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    // }\n});\n// web3.eth.getBalance(web3.eth.accounts[0], function(error, result){\n//     if (error) {\n//         console.error(error)\n//     } else {\n//         console.log(web3.fromWei(result.toNumber()));\n//     }\n// });\nexport default web3;"]},"metadata":{},"sourceType":"module"}