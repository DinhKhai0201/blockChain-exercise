{"ast":null,"code":"import { Table, Button, Form } from 'react-bootstrap';\nimport React, { Component } from 'react'; //import logo from './logo.svg';\n\nimport './App.css';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\n\nclass App extends Component {//     state = {\n  //       ipfsHash:null,\n  //       buffer:'',\n  //       ethAddress:'',\n  //       blockNumber:'',\n  //       transactionHash:'',\n  //       gasUsed:'',\n  //       txReceipt: ''   \n  //     };\n  //     captureFile =(event) => {\n  //         event.stopPropagation()\n  //         event.preventDefault()\n  //         const file = event.target.files[0]\n  //         let reader = new window.FileReader()\n  //         reader.readAsArrayBuffer(file)\n  //         reader.onloadend = () => this.convertToBuffer(reader)    \n  //       };\n  //     convertToBuffer = async(reader) => {\n  //       //file is converted to a buffer to prepare for uploading to IPFS\n  //         const buffer = await Buffer.from(reader.result);\n  //       //set this buffer -using es6 syntax\n  //         this.setState({buffer});\n  //     };\n  //     onClick = async () => {\n  //     try{\n  //         this.setState({blockNumber:\"waiting..\"});\n  //         this.setState({gasUsed:\"waiting...\"});\n  //         // get Transaction Receipt in console on click\n  //         // See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n  //         await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt)=>{\n  //           console.log(err,txReceipt);\n  //           this.setState({txReceipt});\n  //         }); //await for getTransactionReceipt\n  //         await this.setState({blockNumber: this.state.txReceipt.blockNumber});\n  //         await this.setState({gasUsed: this.state.txReceipt.gasUsed});    \n  //       } //try\n  //     catch(error){\n  //         console.log(error);\n  //       } //catch\n  //   } //onClick\n  //     onSubmit = async (event) => {\n  //       event.preventDefault();\n  //       //bring in user's metamask account address\n  //       const accounts = await web3.eth.getAccounts();\n  //       console.log('Sending from Metamask account: ' + accounts[0]);\n  //       //obtain contract address from storehash.js\n  //       const ethAddress= await storehash.options.address;\n  //       this.setState({ethAddress});\n  //       //save document to IPFS,return its hash#, and set hash# to state\n  //       //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add \n  //       await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n  //         console.log(err,ipfsHash);\n  //         //setState by setting ipfsHash to ipfsHash[0].hash \n  //         this.setState({ ipfsHash:ipfsHash[0].hash });\n  //         // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract \n  //         //return the transaction hash from the ethereum contract\n  //         //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n  //         storehash.methods.sendHash(this.state.ipfsHash).send({\n  //           from: accounts[0] \n  //         }, (error, transactionHash) => {\n  //           console.log(transactionHash);\n  //           this.setState({transactionHash});\n  //         }); //storehash \n  //       }) //await ipfs.add \n  //     }; //onSubmit \n  //     render() {\n  //       return (\n  //         <h1>Hello</h1>\n  //       );\n  //     } \n}\n\nexport default App;","map":{"version":3,"sources":["/home/kai/train blockchain/ipfs/src/App.js"],"names":["Table","Button","Form","React","Component","web3","ipfs","storehash","App"],"mappings":"AAAA,SAAQA,KAAR,EAAeC,MAAf,EAAuBC,IAAvB,QAAmC,iBAAnC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B,CAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAtF4B;;AAyF5B,eAAeI,GAAf","sourcesContent":["import {Table, Button, Form } from 'react-bootstrap';\nimport React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\n\nclass App extends Component {\n \n//     state = {\n//       ipfsHash:null,\n//       buffer:'',\n//       ethAddress:'',\n//       blockNumber:'',\n//       transactionHash:'',\n//       gasUsed:'',\n//       txReceipt: ''   \n//     };\n   \n//     captureFile =(event) => {\n//         event.stopPropagation()\n//         event.preventDefault()\n//         const file = event.target.files[0]\n//         let reader = new window.FileReader()\n//         reader.readAsArrayBuffer(file)\n//         reader.onloadend = () => this.convertToBuffer(reader)    \n//       };\n\n//     convertToBuffer = async(reader) => {\n//       //file is converted to a buffer to prepare for uploading to IPFS\n//         const buffer = await Buffer.from(reader.result);\n//       //set this buffer -using es6 syntax\n//         this.setState({buffer});\n//     };\n\n//     onClick = async () => {\n\n//     try{\n//         this.setState({blockNumber:\"waiting..\"});\n//         this.setState({gasUsed:\"waiting...\"});\n\n//         // get Transaction Receipt in console on click\n//         // See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n//         await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt)=>{\n//           console.log(err,txReceipt);\n//           this.setState({txReceipt});\n//         }); //await for getTransactionReceipt\n\n//         await this.setState({blockNumber: this.state.txReceipt.blockNumber});\n//         await this.setState({gasUsed: this.state.txReceipt.gasUsed});    \n//       } //try\n//     catch(error){\n//         console.log(error);\n//       } //catch\n//   } //onClick\n\n//     onSubmit = async (event) => {\n//       event.preventDefault();\n\n//       //bring in user's metamask account address\n//       const accounts = await web3.eth.getAccounts();\n     \n//       console.log('Sending from Metamask account: ' + accounts[0]);\n\n//       //obtain contract address from storehash.js\n//       const ethAddress= await storehash.options.address;\n//       this.setState({ethAddress});\n\n//       //save document to IPFS,return its hash#, and set hash# to state\n//       //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add \n//       await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n//         console.log(err,ipfsHash);\n//         //setState by setting ipfsHash to ipfsHash[0].hash \n//         this.setState({ ipfsHash:ipfsHash[0].hash });\n\n//         // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract \n//         //return the transaction hash from the ethereum contract\n//         //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n        \n//         storehash.methods.sendHash(this.state.ipfsHash).send({\n//           from: accounts[0] \n//         }, (error, transactionHash) => {\n//           console.log(transactionHash);\n//           this.setState({transactionHash});\n//         }); //storehash \n//       }) //await ipfs.add \n//     }; //onSubmit \n  \n//     render() {\n      \n//       return (\n//         <h1>Hello</h1>\n//       );\n//     } \n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}