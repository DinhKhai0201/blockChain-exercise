{"ast":null,"code":"var _jsxFileName = \"/home/kai/train blockchain/blockChain/react-connect-contract/src/App.js\";\nimport { Table, Button, Form } from 'react-bootstrap';\nimport React, { Component } from 'react';\nimport './App.css';\nimport ipfs from './ipfs';\nimport { getContract } from './contractService';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.captureFile = event => {\n      event.stopPropagation();\n      event.preventDefault();\n      const file = event.target.files[0];\n      let reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => this.convertToBuffer(reader);\n    };\n\n    this.convertToBuffer = async reader => {\n      //file is converted to a buffer to prepare for uploading to IPFS\n      const buffer = await Buffer.from(reader.result); //set this buffer -using es6 syntax\n\n      this.setState({\n        buffer\n      });\n    };\n\n    this.onSubmit = async event => {\n      event.preventDefault(); //save document to IPFS,return its hash#, and set hash# to state\n      //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add \n\n      await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n        console.log(err, ipfsHash); //setState by setting ipfsHash to ipfsHash[0].hash \n\n        this.setState({\n          ipfsHash: ipfsHash[0].hash\n        }); // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract \n        //return the transaction hash from the ethereum contract\n        //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n\n        const sendHash = (contracts, web3) => {\n          let that = this;\n          contracts.methods.sendHash(this.state.ipfsHash).send({\n            from: this.state.account\n          }, function (err, transactionHash) {\n            console.log(transactionHash);\n            that.setState({\n              transactionHash: transactionHash\n            });\n          });\n        };\n\n        getContract(sendHash);\n      }); //await ipfs.add \n    };\n\n    this.state = {\n      ipfsHash: '',\n      account: '',\n      buffer: '',\n      ethAddress: '',\n      blockNumber: '',\n      transactionHash: '',\n      gasUsed: '',\n      txReceipt: ''\n    };\n  }\n\n  componentDidMount() {\n    const ipfs = (contracts, web3) => {\n      let that = this;\n      contracts.methods.ipfsHash().call({}, function (err, result) {\n        that.setState({\n          ipfsHash: web3.utils.sha3(result)\n        });\n      });\n    };\n\n    getContract(ipfs);\n\n    const account = (contracts, web3) => {\n      let that = this;\n      web3.eth.getCoinbase(function (err, result) {\n        that.setState({\n          account: result\n        });\n      });\n    };\n\n    getContract(account);\n  }\n\n  //onSubmit \n  //https://gateway.ipfs.io/ipfs/your IPFS hash\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"grid\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \" Choose file to send to IPFS \"), React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this.captureFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Send it\")), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Tx Receipt Category\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \" \"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Values\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"IPFS Hash stored on Ethereum\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \" : \"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, this.state.ipfsHash)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Tx # \"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \" : \"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, this.state.transactionHash))))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/kai/train blockchain/blockChain/react-connect-contract/src/App.js"],"names":["Table","Button","Form","React","Component","ipfs","getContract","App","constructor","props","captureFile","event","stopPropagation","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","buffer","Buffer","from","result","setState","onSubmit","add","state","err","ipfsHash","console","log","hash","sendHash","contracts","web3","that","methods","send","account","transactionHash","ethAddress","blockNumber","gasUsed","txReceipt","componentDidMount","call","utils","sha3","eth","getCoinbase","render"],"mappings":"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","sourcesContent":["import {Table, Button, Form } from 'react-bootstrap';\nimport React, { Component } from 'react';\nimport './App.css';\nimport ipfs from './ipfs';\nimport {getContract} from './contractService';\n\nclass App extends Component {\n    constructor(props){\n      super(props);\n      this.state = {\n        ipfsHash:'',\n        account: '',\n        buffer:'',\n        ethAddress:'',\n        blockNumber:'',\n        transactionHash:'',\n        gasUsed:'',\n        txReceipt: ''   \n      } \n    }\n    componentDidMount(){\n      const ipfs = (contracts, web3) => {\n        let that = this;\n         contracts.methods.ipfsHash().call({},function(err, result) {\n          that.setState({ipfsHash: web3.utils.sha3(result)})\n        })\n      }\n      getContract(ipfs);\n      const account = (contracts, web3) => {\n        let that = this;\n         web3.eth.getCoinbase(function(err, result) {\n          that.setState({account: result})\n        })\n      }\n      getContract(account);\n    }\n    captureFile =(event) => {\n      event.stopPropagation()\n      event.preventDefault()\n      const file = event.target.files[0]\n      let reader = new window.FileReader()\n      reader.readAsArrayBuffer(file)\n      reader.onloadend = () => this.convertToBuffer(reader)    \n    };\n\n    convertToBuffer = async(reader) => {\n      //file is converted to a buffer to prepare for uploading to IPFS\n        const buffer = await Buffer.from(reader.result);\n      //set this buffer -using es6 syntax\n        this.setState({buffer});\n    };\n\n    onSubmit = async (event) => {\n      event.preventDefault();\n      //save document to IPFS,return its hash#, and set hash# to state\n      //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add \n      await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n        console.log(err,ipfsHash);\n        //setState by setting ipfsHash to ipfsHash[0].hash \n        this.setState({ ipfsHash:ipfsHash[0].hash });\n\n        // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract \n        //return the transaction hash from the ethereum contract\n        //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n        const sendHash = (contracts, web3) => {\n            let that = this;\n             contracts.methods.sendHash(this.state.ipfsHash).send({\n                from: this.state.account \n             },function(err, transactionHash) {\n             console.log(transactionHash);\n             that.setState({transactionHash: transactionHash});\n            })\n          }\n        getContract(sendHash);\n      }) //await ipfs.add \n    }; //onSubmit \n    //https://gateway.ipfs.io/ipfs/your IPFS hash\n    render() {    \n      return (\n        <div className=\"App\">          \n            <grid>          \n                <h3> Choose file to send to IPFS </h3>          \n                <form onSubmit={this.onSubmit}>            \n                <input type = \"file\" onChange = {this.captureFile}/>             \n                <Button type=\"submit\">Send it</Button>          \n                </form>\n                <hr/>  \n                <table >\n                    <thead>                  \n                        <tr>                    \n                            <th>Tx Receipt Category</th>                    \n                            <th> </th>                    \n                            <th>Values</th>                  \n                        </tr>                \n                    </thead>\n                    <tbody>                  \n                        <tr>                    \n                        <td>IPFS Hash stored on Ethereum</td>                    \n                        <td> : </td>                    \n                        <td>{this.state.ipfsHash}</td>                  \n                        </tr>                                  \n                        <tr>                    \n                        <td>Tx # </td>                    \n                        <td> : </td>                    \n                        <td>{this.state.transactionHash}</td>                  \n                        </tr>                \n                    </tbody>            \n                </table>        \n            </grid>     \n        </div> \n      );\n    } \n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}