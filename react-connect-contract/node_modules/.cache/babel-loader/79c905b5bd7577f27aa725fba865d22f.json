{"ast":null,"code":"'use strict';\n/* global self */\n\nconst multiaddr = require('multiaddr');\n\nconst loadCommands = require('./utils/load-commands');\n\nconst getConfig = require('./utils/default-config');\n\nconst sendRequest = require('./utils/send-request');\n\nfunction ipfsClient(hostOrMultiaddr, port, opts) {\n  // convert all three params to objects that we can merge.\n  let hostAndPort = {};\n\n  if (!hostOrMultiaddr) {\n    // autoconfigure host and port in browser\n    if (typeof self !== 'undefined') {\n      const split = self.location.host.split(':');\n      hostAndPort.host = split[0];\n      hostAndPort.port = split[1];\n    }\n  } else if (multiaddr.isMultiaddr(hostOrMultiaddr)) {\n    hostAndPort = toHostAndPort(hostOrMultiaddr);\n  } else if (typeof hostOrMultiaddr === 'object') {\n    hostAndPort = hostOrMultiaddr;\n  } else if (typeof hostOrMultiaddr === 'string') {\n    if (hostOrMultiaddr[0] === '/') {\n      // throws if multiaddr is malformed or can't be converted to a nodeAddress\n      hostAndPort = toHostAndPort(multiaddr(hostOrMultiaddr));\n    } else {\n      // hostOrMultiaddr is domain or ip address as a string\n      hostAndPort.host = hostOrMultiaddr;\n    }\n  }\n\n  if (port && typeof port !== 'object') {\n    port = {\n      port: port\n    };\n  }\n\n  const config = Object.assign(getConfig(), hostAndPort, port, opts);\n  const requestAPI = sendRequest(config);\n  const cmds = loadCommands(requestAPI, config);\n  cmds.send = requestAPI;\n  cmds.Buffer = Buffer; // Added buffer in types (this should be removed once a breaking change is release)\n\n  return cmds;\n} // throws if multiaddr can't be converted to a nodeAddress\n\n\nfunction toHostAndPort(multiaddr) {\n  const nodeAddr = multiaddr.nodeAddress();\n  return {\n    host: nodeAddr.address,\n    port: nodeAddr.port\n  };\n}\n\nmodule.exports = ipfsClient;","map":null,"metadata":{},"sourceType":"script"}