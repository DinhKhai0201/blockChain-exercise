{"ast":null,"code":"var _jsxFileName = \"/home/kai/train blockchain/ipfs/src/App.js\";\nimport { Table, Button, Form } from 'react-bootstrap';\nimport React, { Component } from 'react'; //import logo from './logo.svg';\n\nimport './App.css'; // import web3 from './web3';\n\nimport ipfs from './ipfs'; // import storehash from './storehash';\n\nimport { get } from './storehash';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.captureFile = event => {\n      event.stopPropagation();\n      event.preventDefault();\n      const file = event.target.files[0];\n      let reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => this.convertToBuffer(reader);\n    };\n\n    this.convertToBuffer = async reader => {\n      //file is converted to a buffer to prepare for uploading to IPFS\n      const buffer = await Buffer.from(reader.result); //set this buffer -using es6 syntax\n\n      this.setState({\n        buffer\n      });\n    };\n\n    this.state = {\n      ipfsHash: '',\n      buffer: '',\n      ethAddress: '',\n      blockNumber: '',\n      transactionHash: '',\n      gasUsed: '',\n      txReceipt: ''\n    };\n  }\n\n  componentDidMount() {\n    const a = (contracts, web3) => {\n      console.log('contractsa' + contracts);\n      let that = this;\n      contracts.methods.ipfsHash().call({}, function (err, result) {\n        console.log(\"getHash :\", web3.utils.sha3(result));\n        that.setState({\n          ipfsHash: web3.utils.sha3(result)\n        });\n      });\n    };\n\n    get(a);\n  }\n\n  // onClick = async () => {\n  //   try{\n  //       this.setState({blockNumber:\"waiting..\"});\n  //       this.setState({gasUsed:\"waiting...\"});\n  //       // get Transaction Receipt in console on click\n  //       // See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n  //       await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt)=>{\n  //         console.log(err,txReceipt);\n  //         this.setState({txReceipt});\n  //       }); //await for getTransactionReceipt\n  //       await this.setState({blockNumber: this.state.txReceipt.blockNumber});\n  //       await this.setState({gasUsed: this.state.txReceipt.gasUsed});    \n  //     } catch(error){\n  //       console.log(error);\n  //     } //catch\n  // } \n  //onClick\n  // onSubmit = async (event) => {\n  //   event.preventDefault();\n  //   //bring in user's metamask account address\n  //   const accounts = await web3.eth.getAccounts();\n  //   console.log('Sending from Metamask account: ' + accounts[0]);\n  //   //obtain contract address from storehash.js\n  //   const ethAddress= await storehash.options.address;\n  //   this.setState({ethAddress});\n  //   //save document to IPFS,return its hash#, and set hash# to state\n  //   //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add \n  //   await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n  //     console.log(err,ipfsHash);\n  //     //setState by setting ipfsHash to ipfsHash[0].hash \n  //     this.setState({ ipfsHash:ipfsHash[0].hash });\n  //     // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract \n  //     //return the transaction hash from the ethereum contract\n  //     //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n  //     storehash.methods.sendHash(this.state.ipfsHash).send({\n  //       from: accounts[0] \n  //     }, (error, transactionHash) => {\n  //       console.log(transactionHash);\n  //       this.setState({transactionHash});\n  //     }); //storehash \n  //   }) //await ipfs.add \n  // }; //onSubmit \n  render() {\n    return React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, this.state.ipfsHash);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/kai/train blockchain/ipfs/src/App.js"],"names":["Table","Button","Form","React","Component","ipfs","get","App","constructor","props","captureFile","event","stopPropagation","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","buffer","Buffer","from","result","setState","state","ipfsHash","ethAddress","blockNumber","transactionHash","gasUsed","txReceipt","componentDidMount","a","contracts","web3","console","log","that","methods","call","err","utils","sha3","render"],"mappings":";AAAA,SAAQA,KAAR,EAAeC,MAAf,EAAuBC,IAAvB,QAAmC,iBAAnC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAO,WAAP,C,CACA;;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CACA;;AACA,SAAQC,GAAR,QAAkB,aAAlB;;AACA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AACxBI,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;;AADgB,SAyBlBC,WAzBkB,GAyBJC,KAAD,IAAW;AACtBA,MAAAA,KAAK,CAACC,eAAN;AACAD,MAAAA,KAAK,CAACE,cAAN;AACA,YAAMC,IAAI,GAAGH,KAAK,CAACI,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAb;AACA,UAAIC,MAAM,GAAG,IAAIC,MAAM,CAACC,UAAX,EAAb;AACAF,MAAAA,MAAM,CAACG,iBAAP,CAAyBN,IAAzB;;AACAG,MAAAA,MAAM,CAACI,SAAP,GAAmB,MAAM,KAAKC,eAAL,CAAqBL,MAArB,CAAzB;AACD,KAhCiB;;AAAA,SAkClBK,eAlCkB,GAkCA,MAAML,MAAN,IAAiB;AACjC;AACE,YAAMM,MAAM,GAAG,MAAMC,MAAM,CAACC,IAAP,CAAYR,MAAM,CAACS,MAAnB,CAArB,CAF+B,CAGjC;;AACE,WAAKC,QAAL,CAAc;AAACJ,QAAAA;AAAD,OAAd;AACH,KAvCiB;;AAEhB,SAAKK,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAC,EADE;AAEXN,MAAAA,MAAM,EAAC,EAFI;AAGXO,MAAAA,UAAU,EAAC,EAHA;AAIXC,MAAAA,WAAW,EAAC,EAJD;AAKXC,MAAAA,eAAe,EAAC,EALL;AAMXC,MAAAA,OAAO,EAAC,EANG;AAOXC,MAAAA,SAAS,EAAE;AAPA,KAAb;AAUD;;AAEDC,EAAAA,iBAAiB,GAAE;AACjB,UAAMC,CAAC,GAAG,CAACC,SAAD,EAAYC,IAAZ,KAAqB;AAC7BC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAaH,SAAzB;AACA,UAAII,IAAI,GAAG,IAAX;AACCJ,MAAAA,SAAS,CAACK,OAAV,CAAkBb,QAAlB,GAA6Bc,IAA7B,CAAkC,EAAlC,EAAqC,UAASC,GAAT,EAAclB,MAAd,EAAsB;AAC1Da,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBF,IAAI,CAACO,KAAL,CAAWC,IAAX,CAAgBpB,MAAhB,CAAxB;AACAe,QAAAA,IAAI,CAACd,QAAL,CAAc;AAACE,UAAAA,QAAQ,EAAES,IAAI,CAACO,KAAL,CAAWC,IAAX,CAAgBpB,MAAhB;AAAX,SAAd;AACD,OAHA;AAIF,KAPD;;AAQApB,IAAAA,GAAG,CAAC8B,CAAD,CAAH;AACD;;AAiBD;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEF;AAEE;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAW,EAAAA,MAAM,GAAG;AAEP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKnB,KAAL,CAAWC,QAAhB,CADF;AAGD;;AArGuB;;AAwG5B,eAAetB,GAAf","sourcesContent":["import {Table, Button, Form } from 'react-bootstrap';\nimport React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\n// import web3 from './web3';\nimport ipfs from './ipfs';\n// import storehash from './storehash';\nimport {get} from './storehash'\nclass App extends Component {\n    constructor(props){\n      super(props);\n      this.state = {\n        ipfsHash:'',\n        buffer:'',\n        ethAddress:'',\n        blockNumber:'',\n        transactionHash:'',\n        gasUsed:'',\n        txReceipt: ''   \n      }\n   \n    }\n   \n    componentDidMount(){\n      const a = (contracts, web3) => {\n        console.log('contractsa'+contracts)\n        let that = this;\n         contracts.methods.ipfsHash().call({},function(err, result) {\n          console.log(\"getHash :\",web3.utils.sha3(result))\n          that.setState({ipfsHash: web3.utils.sha3(result)})\n        })\n      }\n      get(a);\n    }\n    captureFile =(event) => {\n      event.stopPropagation()\n      event.preventDefault()\n      const file = event.target.files[0]\n      let reader = new window.FileReader()\n      reader.readAsArrayBuffer(file)\n      reader.onloadend = () => this.convertToBuffer(reader)    \n    };\n\n    convertToBuffer = async(reader) => {\n      //file is converted to a buffer to prepare for uploading to IPFS\n        const buffer = await Buffer.from(reader.result);\n      //set this buffer -using es6 syntax\n        this.setState({buffer});\n    };\n\n    // onClick = async () => {\n\n    //   try{\n    //       this.setState({blockNumber:\"waiting..\"});\n    //       this.setState({gasUsed:\"waiting...\"});\n\n    //       // get Transaction Receipt in console on click\n    //       // See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n    //       await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt)=>{\n    //         console.log(err,txReceipt);\n    //         this.setState({txReceipt});\n    //       }); //await for getTransactionReceipt\n\n    //       await this.setState({blockNumber: this.state.txReceipt.blockNumber});\n    //       await this.setState({gasUsed: this.state.txReceipt.gasUsed});    \n    //     } catch(error){\n    //       console.log(error);\n    //     } //catch\n    // } \n\n  //onClick\n\n    // onSubmit = async (event) => {\n    //   event.preventDefault();\n\n    //   //bring in user's metamask account address\n    //   const accounts = await web3.eth.getAccounts();\n     \n    //   console.log('Sending from Metamask account: ' + accounts[0]);\n\n    //   //obtain contract address from storehash.js\n    //   const ethAddress= await storehash.options.address;\n    //   this.setState({ethAddress});\n\n    //   //save document to IPFS,return its hash#, and set hash# to state\n    //   //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add \n    //   await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n    //     console.log(err,ipfsHash);\n    //     //setState by setting ipfsHash to ipfsHash[0].hash \n    //     this.setState({ ipfsHash:ipfsHash[0].hash });\n\n    //     // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract \n    //     //return the transaction hash from the ethereum contract\n    //     //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n        \n    //     storehash.methods.sendHash(this.state.ipfsHash).send({\n    //       from: accounts[0] \n    //     }, (error, transactionHash) => {\n    //       console.log(transactionHash);\n    //       this.setState({transactionHash});\n    //     }); //storehash \n    //   }) //await ipfs.add \n    // }; //onSubmit \n  \n    render() {\n      \n      return (\n        <h1>{this.state.ipfsHash}</h1>\n      );\n    } \n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}