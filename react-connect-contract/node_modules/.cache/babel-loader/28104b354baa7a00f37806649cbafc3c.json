{"ast":null,"code":"var _jsxFileName = \"/home/kai/train blockchain/ipfs/src/App.js\";\nimport { Table, Button, Form } from 'react-bootstrap';\nimport React, { Component } from 'react';\nimport './App.css';\nimport ipfs from './ipfs';\nimport { getContract } from './storehash';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ipfsHash: '',\n      buffer: '',\n      ethAddress: '',\n      blockNumber: '',\n      transactionHash: '',\n      gasUsed: '',\n      txReceipt: ''\n    };\n  }\n\n  componentDidMount() {\n    const ipfs = (contracts, web3) => {\n      let that = this;\n      contracts.methods.ipfsHash().call({}, function (err, result) {\n        that.setState({\n          ipfsHash: web3.utils.sha3(result)\n        });\n      });\n    };\n\n    getContract(ipfs);\n  } // captureFile =(event) => {\n  //   event.stopPropagation()\n  //   event.preventDefault()\n  //   const file = event.target.files[0]\n  //   let reader = new window.FileReader()\n  //   reader.readAsArrayBuffer(file)\n  //   reader.onloadend = () => this.convertToBuffer(reader)    \n  // };\n  // convertToBuffer = async(reader) => {\n  //   //file is converted to a buffer to prepare for uploading to IPFS\n  //     const buffer = await Buffer.from(reader.result);\n  //   //set this buffer -using es6 syntax\n  //     this.setState({buffer});\n  // };\n  // onClick = async () => {\n  //   try{\n  //       this.setState({blockNumber:\"waiting..\"});\n  //       this.setState({gasUsed:\"waiting...\"});\n  //       // get Transaction Receipt in console on click\n  //       // See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n  //       await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt)=>{\n  //         console.log(err,txReceipt);\n  //         this.setState({txReceipt});\n  //       }); //await for getTransactionReceipt\n  //       await this.setState({blockNumber: this.state.txReceipt.blockNumber});\n  //       await this.setState({gasUsed: this.state.txReceipt.gasUsed});    \n  //     } catch(error){\n  //       console.log(error);\n  //     } //catch\n  // } \n  //onClick\n  // onSubmit = async (event) => {\n  //   event.preventDefault();\n  //   //bring in user's metamask account address\n  //   const accounts = await web3.eth.getAccounts();\n  //   console.log('Sending from Metamask account: ' + accounts[0]);\n  //   //obtain contract address from storehash.js\n  //   const ethAddress= await storehash.options.address;\n  //   this.setState({ethAddress});\n  //   //save document to IPFS,return its hash#, and set hash# to state\n  //   //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add \n  //   await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n  //     console.log(err,ipfsHash);\n  //     //setState by setting ipfsHash to ipfsHash[0].hash \n  //     this.setState({ ipfsHash:ipfsHash[0].hash });\n  //     // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract \n  //     //return the transaction hash from the ethereum contract\n  //     //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n  //     storehash.methods.sendHash(this.state.ipfsHash).send({\n  //       from: accounts[0] \n  //     }, (error, transactionHash) => {\n  //       console.log(transactionHash);\n  //       this.setState({transactionHash});\n  //     }); //storehash \n  //   }) //await ipfs.add \n  // }; //onSubmit \n\n\n  render() {\n    return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, this.state.ipfsHash);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/kai/train blockchain/ipfs/src/App.js"],"names":["Table","Button","Form","React","Component","ipfs","getContract","App","constructor","props","state","ipfsHash","buffer","ethAddress","blockNumber","transactionHash","gasUsed","txReceipt","componentDidMount","contracts","web3","that","methods","call","err","result","setState","utils","sha3","render"],"mappings":";AAAA,SAAQA,KAAR,EAAeC,MAAf,EAAuBC,IAAvB,QAAmC,iBAAnC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAAQC,WAAR,QAA0B,aAA1B;;AACA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AACxBI,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAC,EADE;AAEXC,MAAAA,MAAM,EAAC,EAFI;AAGXC,MAAAA,UAAU,EAAC,EAHA;AAIXC,MAAAA,WAAW,EAAC,EAJD;AAKXC,MAAAA,eAAe,EAAC,EALL;AAMXC,MAAAA,OAAO,EAAC,EANG;AAOXC,MAAAA,SAAS,EAAE;AAPA,KAAb;AASD;;AAEDC,EAAAA,iBAAiB,GAAE;AACjB,UAAMb,IAAI,GAAG,CAACc,SAAD,EAAYC,IAAZ,KAAqB;AAChC,UAAIC,IAAI,GAAG,IAAX;AACCF,MAAAA,SAAS,CAACG,OAAV,CAAkBX,QAAlB,GAA6BY,IAA7B,CAAkC,EAAlC,EAAqC,UAASC,GAAT,EAAcC,MAAd,EAAsB;AAC1DJ,QAAAA,IAAI,CAACK,QAAL,CAAc;AAACf,UAAAA,QAAQ,EAAES,IAAI,CAACO,KAAL,CAAWC,IAAX,CAAgBH,MAAhB;AAAX,SAAd;AACD,OAFA;AAGF,KALD;;AAMAnB,IAAAA,WAAW,CAACD,IAAD,CAAX;AACD,GAtBuB,CAuBxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEF;AAEE;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAwB,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAKnB,KAAL,CAAWC,QAAf,CADF;AAGD;;AAjGuB;;AAoG5B,eAAeJ,GAAf","sourcesContent":["import {Table, Button, Form } from 'react-bootstrap';\nimport React, { Component } from 'react';\nimport './App.css';\nimport ipfs from './ipfs';\nimport {getContract} from './storehash'\nclass App extends Component {\n    constructor(props){\n      super(props);\n      this.state = {\n        ipfsHash:'',\n        buffer:'',\n        ethAddress:'',\n        blockNumber:'',\n        transactionHash:'',\n        gasUsed:'',\n        txReceipt: ''   \n      } \n    }\n   \n    componentDidMount(){\n      const ipfs = (contracts, web3) => {\n        let that = this;\n         contracts.methods.ipfsHash().call({},function(err, result) {\n          that.setState({ipfsHash: web3.utils.sha3(result)})\n        })\n      }\n      getContract(ipfs);\n    }\n    // captureFile =(event) => {\n    //   event.stopPropagation()\n    //   event.preventDefault()\n    //   const file = event.target.files[0]\n    //   let reader = new window.FileReader()\n    //   reader.readAsArrayBuffer(file)\n    //   reader.onloadend = () => this.convertToBuffer(reader)    \n    // };\n\n    // convertToBuffer = async(reader) => {\n    //   //file is converted to a buffer to prepare for uploading to IPFS\n    //     const buffer = await Buffer.from(reader.result);\n    //   //set this buffer -using es6 syntax\n    //     this.setState({buffer});\n    // };\n\n    // onClick = async () => {\n\n    //   try{\n    //       this.setState({blockNumber:\"waiting..\"});\n    //       this.setState({gasUsed:\"waiting...\"});\n\n    //       // get Transaction Receipt in console on click\n    //       // See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n    //       await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt)=>{\n    //         console.log(err,txReceipt);\n    //         this.setState({txReceipt});\n    //       }); //await for getTransactionReceipt\n\n    //       await this.setState({blockNumber: this.state.txReceipt.blockNumber});\n    //       await this.setState({gasUsed: this.state.txReceipt.gasUsed});    \n    //     } catch(error){\n    //       console.log(error);\n    //     } //catch\n    // } \n\n  //onClick\n\n    // onSubmit = async (event) => {\n    //   event.preventDefault();\n\n    //   //bring in user's metamask account address\n    //   const accounts = await web3.eth.getAccounts();\n     \n    //   console.log('Sending from Metamask account: ' + accounts[0]);\n\n    //   //obtain contract address from storehash.js\n    //   const ethAddress= await storehash.options.address;\n    //   this.setState({ethAddress});\n\n    //   //save document to IPFS,return its hash#, and set hash# to state\n    //   //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add \n    //   await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n    //     console.log(err,ipfsHash);\n    //     //setState by setting ipfsHash to ipfsHash[0].hash \n    //     this.setState({ ipfsHash:ipfsHash[0].hash });\n\n    //     // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract \n    //     //return the transaction hash from the ethereum contract\n    //     //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n        \n    //     storehash.methods.sendHash(this.state.ipfsHash).send({\n    //       from: accounts[0] \n    //     }, (error, transactionHash) => {\n    //       console.log(transactionHash);\n    //       this.setState({transactionHash});\n    //     }); //storehash \n    //   }) //await ipfs.add \n    // }; //onSubmit \n  \n    render() {    \n      return (\n        <p>{this.state.ipfsHash}</p>\n      );\n    } \n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}