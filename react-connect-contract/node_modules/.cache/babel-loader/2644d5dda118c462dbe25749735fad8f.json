{"ast":null,"code":"import Web3 from 'web3';\nconst infuraKey = \"cf658270146645bca881f8a7d4752099\";\nconst rpcURL = \"https://ropsten.infura.io/v3/\".concat(infuraKey);\nlet web3cur = new Promise((resolve, reject) => {\n  window.addEventListener('load', async () => {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        await window.ethereum.enable();\n        let cur = new Web3(window.ethereum);\n        console.log(\"Metamask\");\n        resolve(cur);\n      } catch (error) {\n        alert('Please allow access for the app to work');\n        reject(null);\n      }\n    } else if (window.web3) {\n      let cur = new Web3(window.web3.currentProvider);\n    } else {\n      let cur = new Web3(new Web3.providers.HttpProvider(rpcURL));\n      console.log(\"No Metamask\");\n      resolve(cur);\n    }\n  });\n});\n\nlet web3 = async () => web3cur;\n\nexport default web3; //default thi khi import thi de ten chi cung duoc","map":{"version":3,"sources":["/home/kai/train blockchain/blockChain/react-connect-contract/src/web3Service.js"],"names":["Web3","infuraKey","rpcURL","web3cur","Promise","resolve","reject","window","addEventListener","ethereum","enable","cur","console","log","error","alert","web3","currentProvider","providers","HttpProvider"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,MAAMC,SAAS,GAAG,kCAAlB;AACA,MAAMC,MAAM,0CAAmCD,SAAnC,CAAZ;AACA,IAAIE,OAAO,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAmB;AACzCC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC5C,QAAI,OAAOD,MAAM,CAACE,QAAd,KAA2B,WAA/B,EAA4C;AACxC,UAAI;AACA,cAAMF,MAAM,CAACE,QAAP,CAAgBC,MAAhB,EAAN;AACA,YAAIC,GAAG,GAAG,IAAIX,IAAJ,CAASO,MAAM,CAACE,QAAhB,CAAV;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAR,QAAAA,OAAO,CAACM,GAAD,CAAP;AACH,OALD,CAKE,OAAOG,KAAP,EAAc;AACZC,QAAAA,KAAK,CAAC,yCAAD,CAAL;AACAT,QAAAA,MAAM,CAAC,IAAD,CAAN;AACH;AACJ,KAVD,MAUO,IAAIC,MAAM,CAACS,IAAX,EAAiB;AACpB,UAAIL,GAAG,GAAG,IAAIX,IAAJ,CAASO,MAAM,CAACS,IAAP,CAAYC,eAArB,CAAV;AACH,KAFM,MAEA;AACH,UAAIN,GAAG,GAAG,IAAIX,IAAJ,CAAS,IAAIA,IAAI,CAACkB,SAAL,CAAeC,YAAnB,CAAgCjB,MAAhC,CAAT,CAAV;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAR,MAAAA,OAAO,CAACM,GAAD,CAAP;AACC;AACJ,GAlBD;AAmBH,CApBa,CAAd;;AAsBA,IAAIK,IAAI,GAAG,YAASb,OAApB;;AACA,eAAea,IAAf,C,CAAqB","sourcesContent":["import Web3 from 'web3';\nconst infuraKey = \"cf658270146645bca881f8a7d4752099\"; \nconst rpcURL = `https://ropsten.infura.io/v3/${infuraKey}`; \nlet web3cur = new Promise((resolve, reject)=>{\n    window.addEventListener('load', async () => {\n    if (typeof window.ethereum !== 'undefined') {\n        try {\n            await window.ethereum.enable();\n            let cur = new Web3(window.ethereum);\n            console.log(\"Metamask\");\n            resolve(cur);\n        } catch (error) {\n            alert('Please allow access for the app to work');\n            reject(null);\n        }\n    } else if (window.web3) {\n        let cur = new Web3(window.web3.currentProvider);\n    } else {\n        let cur = new Web3(new Web3.providers.HttpProvider(rpcURL));\n        console.log(\"No Metamask\")\n        resolve(cur);\n        }\n    })\n});\n\nlet web3 = async()=>web3cur;\nexport default web3; //default thi khi import thi de ten chi cung duoc"]},"metadata":{},"sourceType":"module"}