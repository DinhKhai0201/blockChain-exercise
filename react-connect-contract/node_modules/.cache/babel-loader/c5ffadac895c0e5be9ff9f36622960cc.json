{"ast":null,"code":"//imports the Web3 API\nimport Web3 from 'web3';\n/**\n * creates & exports new instance for \n * Web3 using provided service by Metamask.\n */\n\nconst rpcURL = \"https://ropsten.infura.io/v3/cf658270146645bca881f8a7d4752099\"; // Your RCP URL goes here\n\nvar web3;\nwindow.addEventListener('load', async () => {\n  const metaMaskEthProvider = window.ethereum;\n\n  if (metaMaskEthProvider) {\n    console.log('Detected injected MetaMask Ethereum Provider'); // use MetaMask's provider\n\n    web3 = new Web3(metaMaskEthProvider);\n    console.log('Obtained a MetaMask injected provider');\n    await metaMaskEthProvider.enable(); // get permission to access accounts\n\n    console.log('Obtained permission to use MetaMask accounts');\n  } else {\n    console.warn(\"No web3 detected. Falling back to http://127.0.0.1:9545. You should remove this fallback when you deploy live\"); // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)\n\n    web3 = new Web3(new Web3.providers.HttpProvider(\"http://127.0.0.1:9545\"));\n  } // if (window.ethereum === 'undefined') {\n  //     let instance = new Web3(window.ethereum);\n  // try {\n  //     // Request account access if needed\n  //     await window.ethereum.enable();\n  //     // Acccounts now exposed\n  //     web3 = instance;\n  //     console.log(\"enable\");\n  // } catch (error) {\n  //     // User denied account access...\n  //     alert('Please allow access for the app to work');\n  // }\n  // } else if (window.web3) {\n  //     web3 = new Web3(web3.currentProvider);\n  //     console.log(\"Metamask\");\n  //     // Acccounts always exposed\n  // }\n  // else {\n  //     web3 = new Web3(new Web3.providers.HttpProvider(rpcURL));\n  //     console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n  // }\n\n});\nweb3.eth.getBalance(web3.eth.accounts[0], function (error, result) {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log(web3.fromWei(result.toNumber()));\n  }\n});\nconsole.log(web3);\nexport default web3;","map":{"version":3,"sources":["/home/kai/train blockchain/ipfs/src/web3.js"],"names":["Web3","rpcURL","web3","window","addEventListener","metaMaskEthProvider","ethereum","console","log","enable","warn","providers","HttpProvider","eth","getBalance","accounts","error","result","fromWei","toNumber"],"mappings":"AAAA;AACA,OAAOA,IAAP,MAAiB,MAAjB;AAEA;;;;;AAKA,MAAMC,MAAM,GAAG,+DAAf,C,CAA+E;;AAE/E,IAAIC,IAAJ;AACAC,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AACvC,QAAMC,mBAAmB,GAAGF,MAAM,CAACG,QAAnC;;AACG,MAAID,mBAAJ,EAAyB;AACrBE,IAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ,EADqB,CAErB;;AACAN,IAAAA,IAAI,GAAG,IAAIF,IAAJ,CAASK,mBAAT,CAAP;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACA,UAAMH,mBAAmB,CAACI,MAApB,EAAN,CALqB,CAKe;;AACpCF,IAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACH,GAPD,MAOO;AACHD,IAAAA,OAAO,CAACG,IAAR,CAAa,+GAAb,EADG,CAEH;;AACCR,IAAAA,IAAI,GAAG,IAAIF,IAAJ,CAAS,IAAIA,IAAI,CAACW,SAAL,CAAeC,YAAnB,CAAgC,uBAAhC,CAAT,CAAP;AACJ,GAbmC,CAcxC;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACH,CAnCD;AAoCAV,IAAI,CAACW,GAAL,CAASC,UAAT,CAAoBZ,IAAI,CAACW,GAAL,CAASE,QAAT,CAAkB,CAAlB,CAApB,EAA0C,UAASC,KAAT,EAAgBC,MAAhB,EAAuB;AAC7D,MAAID,KAAJ,EAAW;AACPT,IAAAA,OAAO,CAACS,KAAR,CAAcA,KAAd;AACH,GAFD,MAEO;AACHT,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,CAACgB,OAAL,CAAaD,MAAM,CAACE,QAAP,EAAb,CAAZ;AACH;AACJ,CAND;AAOAZ,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACA,eAAeA,IAAf","sourcesContent":["//imports the Web3 API\nimport Web3 from 'web3';\n\n/**\n * creates & exports new instance for \n * Web3 using provided service by Metamask.\n */\n\nconst rpcURL = \"https://ropsten.infura.io/v3/cf658270146645bca881f8a7d4752099\" // Your RCP URL goes here\n\nvar web3;\nwindow.addEventListener('load', async () => {\n     const metaMaskEthProvider = window.ethereum;\n        if (metaMaskEthProvider) {\n            console.log('Detected injected MetaMask Ethereum Provider');\n            // use MetaMask's provider\n            web3 = new Web3(metaMaskEthProvider);\n            console.log('Obtained a MetaMask injected provider');\n            await metaMaskEthProvider.enable(); // get permission to access accounts\n            console.log('Obtained permission to use MetaMask accounts')\n        } else {\n            console.warn(\"No web3 detected. Falling back to http://127.0.0.1:9545. You should remove this fallback when you deploy live\",);\n            // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)\n             web3 = new Web3(new Web3.providers.HttpProvider(\"http://127.0.0.1:9545\"),);\n        }\n    // if (window.ethereum === 'undefined') {\n    //     let instance = new Web3(window.ethereum);\n        // try {\n        //     // Request account access if needed\n        //     await window.ethereum.enable();\n        //     // Acccounts now exposed\n        //     web3 = instance;\n        //     console.log(\"enable\");\n        // } catch (error) {\n        //     // User denied account access...\n        //     alert('Please allow access for the app to work');\n        // }\n    // } else if (window.web3) {\n    //     web3 = new Web3(web3.currentProvider);\n    //     console.log(\"Metamask\");\n    //     // Acccounts always exposed\n    // }\n    // else {\n    //     web3 = new Web3(new Web3.providers.HttpProvider(rpcURL));\n    //     console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    // }\n});\nweb3.eth.getBalance(web3.eth.accounts[0], function(error, result){\n    if (error) {\n        console.error(error)\n    } else {\n        console.log(web3.fromWei(result.toNumber()));\n    }\n});\nconsole.log(web3);\nexport default web3;"]},"metadata":{},"sourceType":"module"}