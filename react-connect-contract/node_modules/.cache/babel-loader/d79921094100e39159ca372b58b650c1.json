{"ast":null,"code":"var _jsxFileName = \"/home/kai/train blockchain/blockChain/react-connect-contract/src/App.js\";\nimport { Table, Button, Form } from 'react-bootstrap';\nimport React, { Component } from 'react';\nimport './App.css';\nimport ipfs from './ipfs';\nimport { getContract } from './contractService';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.captureFile = event => {\n      event.stopPropagation();\n      event.preventDefault();\n      const file = event.target.files[0];\n      let reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => this.convertToBuffer(reader);\n    };\n\n    this.convertToBuffer = async reader => {\n      //file is converted to a buffer to prepare for uploading to IPFS\n      const buffer = await Buffer.from(reader.result); //set this buffer -using es6 syntax\n\n      this.setState({\n        buffer\n      });\n    };\n\n    this.onClick = async () => {\n      try {\n        this.setState({\n          blockNumber: \"waiting..\"\n        });\n        this.setState({\n          gasUsed: \"waiting...\"\n        }); // get Transaction Receipt in console on click\n        // See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n\n        const getTransactionReceipt = (contracts, web3) => {\n          let that = this;\n          web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt) => {\n            that.setState({\n              ipfsHash: web3.utils.sha3(result)\n            });\n          });\n        };\n\n        await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt) => {\n          console.log(err, txReceipt);\n          this.setState({\n            txReceipt\n          });\n        }); //await for getTransactionReceipt\n\n        await this.setState({\n          blockNumber: this.state.txReceipt.blockNumber\n        });\n        await this.setState({\n          gasUsed: this.state.txReceipt.gasUsed\n        });\n      } catch (error) {\n        console.log(error);\n      } //catch\n\n    };\n\n    this.onSubmit = async event => {\n      event.preventDefault(); //bring in user's metamask account address\n      // const accounts = await web3.eth.getAccounts();\n      // console.log('Sending from Metamask account: ' + accounts[0]);\n      //obtain contract address from storehash.js\n      // const ethAddress= await storehash.options.address;\n      // this.setState({ethAddress});\n      //save document to IPFS,return its hash#, and set hash# to state\n      //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add \n\n      await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n        console.log(err, ipfsHash); //setState by setting ipfsHash to ipfsHash[0].hash \n\n        this.setState({\n          ipfsHash: ipfsHash[0].hash\n        }); // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract \n        //return the transaction hash from the ethereum contract\n        //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n\n        const sendHash = (contracts, web3) => {\n          let that = this;\n          contracts.methods.sendHash(this.state.ipfsHash).send({\n            from: this.state.account\n          }, function (err, transactionHash) {\n            console.log(transactionHash);\n            this.setState({\n              transactionHash\n            });\n          });\n        };\n\n        getContract(sendHash);\n      }); //await ipfs.add \n    };\n\n    this.state = {\n      ipfsHash: '',\n      account: '',\n      buffer: '',\n      ethAddress: '',\n      blockNumber: '',\n      transactionHash: '',\n      gasUsed: '',\n      txReceipt: ''\n    };\n  }\n\n  componentDidMount() {\n    const ipfs = (contracts, web3) => {\n      let that = this;\n      contracts.methods.ipfsHash().call({}, function (err, result) {\n        that.setState({\n          ipfsHash: web3.utils.sha3(result)\n        });\n      });\n    };\n\n    getContract(ipfs);\n\n    const account = (contracts, web3) => {\n      let that = this;\n      web3.eth.getCoinbase(function (err, result) {\n        that.setState({\n          account: result\n        });\n      });\n    };\n\n    getContract(account);\n  }\n\n  //onSubmit \n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Ethereum and IPFS using Infura\")), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(\"grid\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \" Choose file to send to IPFS \"), React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this.captureFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), React.createElement(Button, {\n      bsStyle: \"primary\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Send it\")), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), React.createElement(Button, {\n      onClick: this.onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \" Get Transaction Receipt \"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(\"table\", {\n      bordered: true,\n      responsive: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Tx Receipt Category\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \" \"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Values\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"IPFS Hash stored on Ethereum\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \" : \"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, this.state.ipfsHash)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Ethereum Contract Address\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \" : \"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, this.state.ethAddress)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"Tx # \"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \" : \"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, this.state.transactionHash))))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/kai/train blockchain/blockChain/react-connect-contract/src/App.js"],"names":["Table","Button","Form","React","Component","ipfs","getContract","App","constructor","props","captureFile","event","stopPropagation","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","buffer","Buffer","from","result","setState","onClick","blockNumber","gasUsed","getTransactionReceipt","contracts","web3","that","eth","state","transactionHash","err","txReceipt","ipfsHash","utils","sha3","console","log","error","onSubmit","add","hash","sendHash","methods","send","account","ethAddress","componentDidMount","call","getCoinbase","render"],"mappings":";AAAA,SAAQA,KAAR,EAAeC,MAAf,EAAuBC,IAAvB,QAAmC,iBAAnC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAAQC,WAAR,QAA0B,mBAA1B;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AACxBI,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;;AADgB,SA6BlBC,WA7BkB,GA6BJC,KAAD,IAAW;AACtBA,MAAAA,KAAK,CAACC,eAAN;AACAD,MAAAA,KAAK,CAACE,cAAN;AACA,YAAMC,IAAI,GAAGH,KAAK,CAACI,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAb;AACA,UAAIC,MAAM,GAAG,IAAIC,MAAM,CAACC,UAAX,EAAb;AACAF,MAAAA,MAAM,CAACG,iBAAP,CAAyBN,IAAzB;;AACAG,MAAAA,MAAM,CAACI,SAAP,GAAmB,MAAM,KAAKC,eAAL,CAAqBL,MAArB,CAAzB;AACD,KApCiB;;AAAA,SAsClBK,eAtCkB,GAsCA,MAAML,MAAN,IAAiB;AACjC;AACE,YAAMM,MAAM,GAAG,MAAMC,MAAM,CAACC,IAAP,CAAYR,MAAM,CAACS,MAAnB,CAArB,CAF+B,CAGjC;;AACE,WAAKC,QAAL,CAAc;AAACJ,QAAAA;AAAD,OAAd;AACH,KA3CiB;;AAAA,SA6ClBK,OA7CkB,GA6CR,YAAY;AACpB,UAAG;AACC,aAAKD,QAAL,CAAc;AAACE,UAAAA,WAAW,EAAC;AAAb,SAAd;AACA,aAAKF,QAAL,CAAc;AAACG,UAAAA,OAAO,EAAC;AAAT,SAAd,EAFD,CAIC;AACA;;AACA,cAAMC,qBAAqB,GAAG,CAACC,SAAD,EAAYC,IAAZ,KAAqB;AACjD,cAAIC,IAAI,GAAG,IAAX;AACCD,UAAAA,IAAI,CAACE,GAAL,CAASJ,qBAAT,CAA+B,KAAKK,KAAL,CAAWC,eAA1C,EAA2D,CAACC,GAAD,EAAMC,SAAN,KAAkB;AAC5EL,YAAAA,IAAI,CAACP,QAAL,CAAc;AAACa,cAAAA,QAAQ,EAAEP,IAAI,CAACQ,KAAL,CAAWC,IAAX,CAAgBhB,MAAhB;AAAX,aAAd;AACD,WAFA;AAGF,SALD;;AAMA,cAAMO,IAAI,CAACE,GAAL,CAASJ,qBAAT,CAA+B,KAAKK,KAAL,CAAWC,eAA1C,EAA2D,CAACC,GAAD,EAAMC,SAAN,KAAkB;AACjFI,UAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ,EAAgBC,SAAhB;AACA,eAAKZ,QAAL,CAAc;AAACY,YAAAA;AAAD,WAAd;AACD,SAHK,CAAN,CAZD,CAeK;;AAEJ,cAAM,KAAKZ,QAAL,CAAc;AAACE,UAAAA,WAAW,EAAE,KAAKO,KAAL,CAAWG,SAAX,CAAqBV;AAAnC,SAAd,CAAN;AACA,cAAM,KAAKF,QAAL,CAAc;AAACG,UAAAA,OAAO,EAAE,KAAKM,KAAL,CAAWG,SAAX,CAAqBT;AAA/B,SAAd,CAAN;AACD,OAnBH,CAmBI,OAAMe,KAAN,EAAY;AACZF,QAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACD,OAtBiB,CAsBhB;;AACL,KApEiB;;AAAA,SAwElBC,QAxEkB,GAwEP,MAAOnC,KAAP,IAAiB;AAC1BA,MAAAA,KAAK,CAACE,cAAN,GAD0B,CAG1B;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;;AACA,YAAMR,IAAI,CAAC0C,GAAL,CAAS,KAAKX,KAAL,CAAWb,MAApB,EAA4B,CAACe,GAAD,EAAME,QAAN,KAAmB;AACnDG,QAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ,EAAgBE,QAAhB,EADmD,CAEnD;;AACA,aAAKb,QAAL,CAAc;AAAEa,UAAAA,QAAQ,EAACA,QAAQ,CAAC,CAAD,CAAR,CAAYQ;AAAvB,SAAd,EAHmD,CAKnD;AACA;AACA;;AACA,cAAMC,QAAQ,GAAG,CAACjB,SAAD,EAAYC,IAAZ,KAAqB;AAClC,cAAIC,IAAI,GAAG,IAAX;AACCF,UAAAA,SAAS,CAACkB,OAAV,CAAkBD,QAAlB,CAA2B,KAAKb,KAAL,CAAWI,QAAtC,EAAgDW,IAAhD,CAAqD;AAClD1B,YAAAA,IAAI,EAAE,KAAKW,KAAL,CAAWgB;AADiC,WAArD,EAEE,UAASd,GAAT,EAAcD,eAAd,EAA+B;AACjCM,YAAAA,OAAO,CAACC,GAAR,CAAYP,eAAZ;AACA,iBAAKV,QAAL,CAAc;AAACU,cAAAA;AAAD,aAAd;AACA,WALA;AAMF,SARH;;AASA/B,QAAAA,WAAW,CAAC2C,QAAD,CAAX;AACD,OAlBK,CAAN,CAd0B,CAgCvB;AACJ,KAzGiB;;AAEhB,SAAKb,KAAL,GAAa;AACXI,MAAAA,QAAQ,EAAC,EADE;AAEXY,MAAAA,OAAO,EAAE,EAFE;AAGX7B,MAAAA,MAAM,EAAC,EAHI;AAIX8B,MAAAA,UAAU,EAAC,EAJA;AAKXxB,MAAAA,WAAW,EAAC,EALD;AAMXQ,MAAAA,eAAe,EAAC,EANL;AAOXP,MAAAA,OAAO,EAAC,EAPG;AAQXS,MAAAA,SAAS,EAAE;AARA,KAAb;AAUD;;AACDe,EAAAA,iBAAiB,GAAE;AACjB,UAAMjD,IAAI,GAAG,CAAC2B,SAAD,EAAYC,IAAZ,KAAqB;AAChC,UAAIC,IAAI,GAAG,IAAX;AACCF,MAAAA,SAAS,CAACkB,OAAV,CAAkBV,QAAlB,GAA6Be,IAA7B,CAAkC,EAAlC,EAAqC,UAASjB,GAAT,EAAcZ,MAAd,EAAsB;AAC1DQ,QAAAA,IAAI,CAACP,QAAL,CAAc;AAACa,UAAAA,QAAQ,EAAEP,IAAI,CAACQ,KAAL,CAAWC,IAAX,CAAgBhB,MAAhB;AAAX,SAAd;AACD,OAFA;AAGF,KALD;;AAMApB,IAAAA,WAAW,CAACD,IAAD,CAAX;;AACA,UAAM+C,OAAO,GAAG,CAACpB,SAAD,EAAYC,IAAZ,KAAqB;AACnC,UAAIC,IAAI,GAAG,IAAX;AACCD,MAAAA,IAAI,CAACE,GAAL,CAASqB,WAAT,CAAqB,UAASlB,GAAT,EAAcZ,MAAd,EAAsB;AAC1CQ,QAAAA,IAAI,CAACP,QAAL,CAAc;AAACyB,UAAAA,OAAO,EAAE1B;AAAV,SAAd;AACD,OAFA;AAGF,KALD;;AAMApB,IAAAA,WAAW,CAAC8C,OAAD,CAAX;AACD;;AA6EE;AAEHK,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCADJ,CADJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADJ,EAEI;AAAM,MAAA,QAAQ,EAAE,KAAKX,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAO,MAAA,IAAI,EAAG,MAAd;AAAqB,MAAA,QAAQ,EAAI,KAAKpC,WAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,EAEA,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,SAAhB;AAA0B,MAAA,IAAI,EAAC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFA,CAFJ,EAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,EAOI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAI,KAAKkB,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAPJ,EAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARJ,EASI;AAAO,MAAA,QAAQ,MAAf;AAAgB,MAAA,UAAU,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,CADJ,CADJ,EAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFA,EAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKQ,KAAL,CAAWI,QAAhB,CAHA,CADJ,EAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFA,EAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKJ,KAAL,CAAWiB,UAAhB,CAHA,CANJ,EAWI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFA,EAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKjB,KAAL,CAAWC,eAAhB,CAHA,CAXJ,CARJ,CATJ,CALJ,CADF;AA4CD;;AAzJuB;;AA4J5B,eAAe9B,GAAf","sourcesContent":["import {Table, Button, Form } from 'react-bootstrap';\nimport React, { Component } from 'react';\nimport './App.css';\nimport ipfs from './ipfs';\nimport {getContract} from './contractService';\n\nclass App extends Component {\n    constructor(props){\n      super(props);\n      this.state = {\n        ipfsHash:'',\n        account: '',\n        buffer:'',\n        ethAddress:'',\n        blockNumber:'',\n        transactionHash:'',\n        gasUsed:'',\n        txReceipt: ''   \n      } \n    }\n    componentDidMount(){\n      const ipfs = (contracts, web3) => {\n        let that = this;\n         contracts.methods.ipfsHash().call({},function(err, result) {\n          that.setState({ipfsHash: web3.utils.sha3(result)})\n        })\n      }\n      getContract(ipfs);\n      const account = (contracts, web3) => {\n        let that = this;\n         web3.eth.getCoinbase(function(err, result) {\n          that.setState({account: result})\n        })\n      }\n      getContract(account);\n    }\n    captureFile =(event) => {\n      event.stopPropagation()\n      event.preventDefault()\n      const file = event.target.files[0]\n      let reader = new window.FileReader()\n      reader.readAsArrayBuffer(file)\n      reader.onloadend = () => this.convertToBuffer(reader)    \n    };\n\n    convertToBuffer = async(reader) => {\n      //file is converted to a buffer to prepare for uploading to IPFS\n        const buffer = await Buffer.from(reader.result);\n      //set this buffer -using es6 syntax\n        this.setState({buffer});\n    };\n\n    onClick = async () => {\n      try{\n          this.setState({blockNumber:\"waiting..\"});\n          this.setState({gasUsed:\"waiting...\"});\n\n          // get Transaction Receipt in console on click\n          // See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n          const getTransactionReceipt = (contracts, web3) => {\n            let that = this;\n             web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt)=>{\n              that.setState({ipfsHash: web3.utils.sha3(result)})\n            })\n          }\n          await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt)=>{\n            console.log(err,txReceipt);\n            this.setState({txReceipt});\n          }); //await for getTransactionReceipt\n\n          await this.setState({blockNumber: this.state.txReceipt.blockNumber});\n          await this.setState({gasUsed: this.state.txReceipt.gasUsed});    \n        } catch(error){\n          console.log(error);\n        } //catch\n    } \n\n  //onClick\n\n    onSubmit = async (event) => {\n      event.preventDefault();\n\n      //bring in user's metamask account address\n      // const accounts = await web3.eth.getAccounts();\n     \n      // console.log('Sending from Metamask account: ' + accounts[0]);\n\n      //obtain contract address from storehash.js\n      // const ethAddress= await storehash.options.address;\n      // this.setState({ethAddress});\n\n      //save document to IPFS,return its hash#, and set hash# to state\n      //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add \n      await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n        console.log(err,ipfsHash);\n        //setState by setting ipfsHash to ipfsHash[0].hash \n        this.setState({ ipfsHash:ipfsHash[0].hash });\n\n        // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract \n        //return the transaction hash from the ethereum contract\n        //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n        const sendHash = (contracts, web3) => {\n            let that = this;\n             contracts.methods.sendHash(this.state.ipfsHash).send({\n                from: this.state.account \n             },function(err, transactionHash) {\n             console.log(transactionHash);\n             this.setState({transactionHash});\n            })\n          }\n        getContract(sendHash);\n      }) //await ipfs.add \n    }; //onSubmit \n  \n    render() {    \n      return (\n        <div className=\"App\">          \n            <header className=\"App-header\">            \n                <h1>Ethereum and IPFS using Infura</h1>          \n            </header>\n            <hr/>\n            <grid>          \n                <h3> Choose file to send to IPFS </h3>          \n                <form onSubmit={this.onSubmit}>            \n                <input type = \"file\" onChange = {this.captureFile}/>             \n                <Button bsStyle=\"primary\" type=\"submit\">Send it</Button>          \n                </form>\n                <hr/> \n                <Button onClick = {this.onClick}> Get Transaction Receipt </Button> \n                <hr/>  \n                <table bordered responsive>\n                    <thead>                  \n                        <tr>                    \n                            <th>Tx Receipt Category</th>                    \n                            <th> </th>                    \n                            <th>Values</th>                  \n                        </tr>                \n                    </thead>\n                    <tbody>                  \n                        <tr>                    \n                        <td>IPFS Hash stored on Ethereum</td>                    \n                        <td> : </td>                    \n                        <td>{this.state.ipfsHash}</td>                  \n                        </tr>                  \n                        <tr>                    \n                        <td>Ethereum Contract Address</td>                    \n                        <td> : </td>                    \n                        <td>{this.state.ethAddress}</td>                  \n                        </tr>                  \n                        <tr>                    \n                        <td>Tx # </td>                    \n                        <td> : </td>                    \n                        <td>{this.state.transactionHash}</td>                  \n                        </tr>                \n                    </tbody>            \n                </table>        \n            </grid>     \n        </div> \n      );\n    } \n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}