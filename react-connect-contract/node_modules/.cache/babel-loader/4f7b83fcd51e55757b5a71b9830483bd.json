{"ast":null,"code":"var _jsxFileName = \"/home/kai/train blockchain/ipfs/src/App.js\";\nimport { Table, Button, Form } from 'react-bootstrap';\nimport React, { Component } from 'react'; //import logo from './logo.svg';\n\nimport './App.css';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\nimport { get } from './storehash';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ipfsHash: null,\n      buffer: '',\n      ethAddress: '',\n      blockNumber: '',\n      transactionHash: '',\n      gasUsed: '',\n      txReceipt: ''\n    };\n\n    this.captureFile = event => {\n      event.stopPropagation();\n      event.preventDefault();\n      const file = event.target.files[0];\n      let reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => this.convertToBuffer(reader);\n    };\n\n    this.convertToBuffer = async reader => {\n      //file is converted to a buffer to prepare for uploading to IPFS\n      const buffer = await Buffer.from(reader.result); //set this buffer -using es6 syntax\n\n      this.setState({\n        buffer\n      });\n    };\n\n    this.onClick = async () => {\n      try {\n        this.setState({\n          blockNumber: \"waiting..\"\n        });\n        this.setState({\n          gasUsed: \"waiting...\"\n        }); // get Transaction Receipt in console on click\n        // See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n\n        await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt) => {\n          console.log(err, txReceipt);\n          this.setState({\n            txReceipt\n          });\n        }); //await for getTransactionReceipt\n\n        await this.setState({\n          blockNumber: this.state.txReceipt.blockNumber\n        });\n        await this.setState({\n          gasUsed: this.state.txReceipt.gasUsed\n        });\n      } //try\n      catch (error) {\n        console.log(error);\n      } //catch\n\n    };\n  }\n\n  //onClick\n  // onSubmit = async (event) => {\n  //   event.preventDefault();\n  //   //bring in user's metamask account address\n  //   const accounts = await web3.eth.getAccounts();\n  //   console.log('Sending from Metamask account: ' + accounts[0]);\n  //   //obtain contract address from storehash.js\n  //   const ethAddress= await storehash.options.address;\n  //   this.setState({ethAddress});\n  //   //save document to IPFS,return its hash#, and set hash# to state\n  //   //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add \n  //   await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n  //     console.log(err,ipfsHash);\n  //     //setState by setting ipfsHash to ipfsHash[0].hash \n  //     this.setState({ ipfsHash:ipfsHash[0].hash });\n  //     // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract \n  //     //return the transaction hash from the ethereum contract\n  //     //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n  //     storehash.methods.sendHash(this.state.ipfsHash).send({\n  //       from: accounts[0] \n  //     }, (error, transactionHash) => {\n  //       console.log(transactionHash);\n  //       this.setState({transactionHash});\n  //     }); //storehash \n  //   }) //await ipfs.add \n  // }; //onSubmit \n  render() {\n    return React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Hello\");\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/kai/train blockchain/ipfs/src/App.js"],"names":["Table","Button","Form","React","Component","web3","ipfs","storehash","get","App","state","ipfsHash","buffer","ethAddress","blockNumber","transactionHash","gasUsed","txReceipt","captureFile","event","stopPropagation","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","Buffer","from","result","setState","onClick","eth","getTransactionReceipt","err","console","log","error","render"],"mappings":";AAAA,SAAQA,KAAR,EAAeC,MAAf,EAAuBC,IAAvB,QAAmC,iBAAnC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAAQC,GAAR,QAAkB,aAAlB;;AACA,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAExBM,KAFwB,GAEhB;AACNC,MAAAA,QAAQ,EAAC,IADH;AAENC,MAAAA,MAAM,EAAC,EAFD;AAGNC,MAAAA,UAAU,EAAC,EAHL;AAINC,MAAAA,WAAW,EAAC,EAJN;AAKNC,MAAAA,eAAe,EAAC,EALV;AAMNC,MAAAA,OAAO,EAAC,EANF;AAONC,MAAAA,SAAS,EAAE;AAPL,KAFgB;;AAAA,SAYxBC,WAZwB,GAYVC,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACC,eAAN;AACAD,MAAAA,KAAK,CAACE,cAAN;AACA,YAAMC,IAAI,GAAGH,KAAK,CAACI,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAb;AACA,UAAIC,MAAM,GAAG,IAAIC,MAAM,CAACC,UAAX,EAAb;AACAF,MAAAA,MAAM,CAACG,iBAAP,CAAyBN,IAAzB;;AACAG,MAAAA,MAAM,CAACI,SAAP,GAAmB,MAAM,KAAKC,eAAL,CAAqBL,MAArB,CAAzB;AACD,KAnBqB;;AAAA,SAqBxBK,eArBwB,GAqBN,MAAML,MAAN,IAAiB;AACjC;AACE,YAAMb,MAAM,GAAG,MAAMmB,MAAM,CAACC,IAAP,CAAYP,MAAM,CAACQ,MAAnB,CAArB,CAF+B,CAGjC;;AACE,WAAKC,QAAL,CAAc;AAACtB,QAAAA;AAAD,OAAd;AACH,KA1BuB;;AAAA,SA4BxBuB,OA5BwB,GA4Bd,YAAY;AAEtB,UAAG;AACC,aAAKD,QAAL,CAAc;AAACpB,UAAAA,WAAW,EAAC;AAAb,SAAd;AACA,aAAKoB,QAAL,CAAc;AAAClB,UAAAA,OAAO,EAAC;AAAT,SAAd,EAFD,CAIC;AACA;;AACA,cAAMX,IAAI,CAAC+B,GAAL,CAASC,qBAAT,CAA+B,KAAK3B,KAAL,CAAWK,eAA1C,EAA2D,CAACuB,GAAD,EAAMrB,SAAN,KAAkB;AACjFsB,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EAAgBrB,SAAhB;AACA,eAAKiB,QAAL,CAAc;AAACjB,YAAAA;AAAD,WAAd;AACD,SAHK,CAAN,CAND,CASK;;AAEJ,cAAM,KAAKiB,QAAL,CAAc;AAACpB,UAAAA,WAAW,EAAE,KAAKJ,KAAL,CAAWO,SAAX,CAAqBH;AAAnC,SAAd,CAAN;AACA,cAAM,KAAKoB,QAAL,CAAc;AAAClB,UAAAA,OAAO,EAAE,KAAKN,KAAL,CAAWO,SAAX,CAAqBD;AAA/B,SAAd,CAAN;AACD,OAbH,CAaI;AACJ,aAAMyB,KAAN,EAAY;AACRF,QAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACD,OAlBmB,CAkBlB;;AACL,KA/CyB;AAAA;;AA+CxB;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAC,EAAAA,MAAM,GAAG;AAEP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF;AAGD;;AAtFuB;;AAyF5B,eAAejC,GAAf","sourcesContent":["import {Table, Button, Form } from 'react-bootstrap';\nimport React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\nimport {get} from './storehash'\nclass App extends Component {\n \n    state = {\n      ipfsHash:null,\n      buffer:'',\n      ethAddress:'',\n      blockNumber:'',\n      transactionHash:'',\n      gasUsed:'',\n      txReceipt: ''   \n    };\n   \n    captureFile =(event) => {\n        event.stopPropagation()\n        event.preventDefault()\n        const file = event.target.files[0]\n        let reader = new window.FileReader()\n        reader.readAsArrayBuffer(file)\n        reader.onloadend = () => this.convertToBuffer(reader)    \n      };\n\n    convertToBuffer = async(reader) => {\n      //file is converted to a buffer to prepare for uploading to IPFS\n        const buffer = await Buffer.from(reader.result);\n      //set this buffer -using es6 syntax\n        this.setState({buffer});\n    };\n\n    onClick = async () => {\n\n    try{\n        this.setState({blockNumber:\"waiting..\"});\n        this.setState({gasUsed:\"waiting...\"});\n\n        // get Transaction Receipt in console on click\n        // See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n        await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt)=>{\n          console.log(err,txReceipt);\n          this.setState({txReceipt});\n        }); //await for getTransactionReceipt\n\n        await this.setState({blockNumber: this.state.txReceipt.blockNumber});\n        await this.setState({gasUsed: this.state.txReceipt.gasUsed});    \n      } //try\n    catch(error){\n        console.log(error);\n      } //catch\n  } //onClick\n\n    // onSubmit = async (event) => {\n    //   event.preventDefault();\n\n    //   //bring in user's metamask account address\n    //   const accounts = await web3.eth.getAccounts();\n     \n    //   console.log('Sending from Metamask account: ' + accounts[0]);\n\n    //   //obtain contract address from storehash.js\n    //   const ethAddress= await storehash.options.address;\n    //   this.setState({ethAddress});\n\n    //   //save document to IPFS,return its hash#, and set hash# to state\n    //   //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add \n    //   await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n    //     console.log(err,ipfsHash);\n    //     //setState by setting ipfsHash to ipfsHash[0].hash \n    //     this.setState({ ipfsHash:ipfsHash[0].hash });\n\n    //     // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract \n    //     //return the transaction hash from the ethereum contract\n    //     //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n        \n    //     storehash.methods.sendHash(this.state.ipfsHash).send({\n    //       from: accounts[0] \n    //     }, (error, transactionHash) => {\n    //       console.log(transactionHash);\n    //       this.setState({transactionHash});\n    //     }); //storehash \n    //   }) //await ipfs.add \n    // }; //onSubmit \n  \n    render() {\n      \n      return (\n        <h1>Hello</h1>\n      );\n    } \n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}