{"ast":null,"code":"import Web3 from 'web3';\nconst rpcURL = \"https://ropsten.infura.io/v3/cf658270146645bca881f8a7d4752099\"; // Your RCP URL goes here\n\nlet currentWeb3;\nwindow.addEventListener('load', async () => {\n  const metaMaskEthProvider = window.ethereum;\n\n  if (metaMaskEthProvider) {\n    console.log('Detected injected MetaMask Ethereum Provider');\n    let instance = new currentWeb3(metaMaskEthProvider);\n    console.log('Obtained a MetaMask injected provider');\n\n    try {\n      await metaMaskEthProvider.enable();\n      currentWeb3 = instance;\n      console.log('Obtained permission to use MetaMask accounts');\n    } catch (error) {\n      alert('Please allow access for the app to work');\n    }\n  } else {\n    console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    currentWeb3 = new currentWeb3(rpcURL);\n  }\n});\nexport default currentWeb3;","map":{"version":3,"sources":["/home/kai/train blockchain/ipfs/src/web3.js"],"names":["Web3","rpcURL","currentWeb3","window","addEventListener","metaMaskEthProvider","ethereum","console","log","instance","enable","error","alert"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAEA,MAAMC,MAAM,GAAG,+DAAf,C,CAA+E;;AAC/E,IAAIC,WAAJ;AAEAC,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AACxC,QAAMC,mBAAmB,GAAGF,MAAM,CAACG,QAAnC;;AACA,MAAID,mBAAJ,EAAyB;AACrBE,IAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACA,QAAIC,QAAQ,GAAG,IAAIP,WAAJ,CAAgBG,mBAAhB,CAAf;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;;AACA,QAAI;AACA,YAAMH,mBAAmB,CAACK,MAApB,EAAN;AACAR,MAAAA,WAAW,GAAGO,QAAd;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACH,KAJD,CAIE,OAAOG,KAAP,EAAc;AACZC,MAAAA,KAAK,CAAC,yCAAD,CAAL;AACH;AACJ,GAXD,MAWO;AACHL,IAAAA,OAAO,CAACC,GAAR,CAAY,qEAAZ;AACAN,IAAAA,WAAW,GAAG,IAAIA,WAAJ,CAAgBD,MAAhB,CAAd;AACH;AACJ,CAjBD;AAkBA,eAAeC,WAAf","sourcesContent":["import Web3 from 'web3';\n\nconst rpcURL = \"https://ropsten.infura.io/v3/cf658270146645bca881f8a7d4752099\" // Your RCP URL goes here\nlet currentWeb3;\n\nwindow.addEventListener('load', async () => {\n    const metaMaskEthProvider = window.ethereum;\n    if (metaMaskEthProvider) {\n        console.log('Detected injected MetaMask Ethereum Provider');\n        let instance = new currentWeb3(metaMaskEthProvider);\n        console.log('Obtained a MetaMask injected provider');\n        try {\n            await metaMaskEthProvider.enable();\n            currentWeb3 = instance;\n            console.log('Obtained permission to use MetaMask accounts')\n        } catch (error) {\n            alert('Please allow access for the app to work');\n        }\n    } else {\n        console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n        currentWeb3 = new currentWeb3(rpcURL);\n    }\n});\nexport default currentWeb3;"]},"metadata":{},"sourceType":"module"}