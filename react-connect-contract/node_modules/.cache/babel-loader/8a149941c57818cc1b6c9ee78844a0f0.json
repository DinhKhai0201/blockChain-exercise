{"ast":null,"code":"'use strict';\n\nconst assert = require('assert');\n\nconst withIs = require('class-is');\n\nclass DAGNode {\n  constructor(data, links, serializedSize) {\n    if (serializedSize !== 0) {\n      assert(serializedSize, 'A DAGNode requires it\\'s serialized size');\n    }\n\n    this._data = data || Buffer.alloc(0);\n    this._links = links || [];\n    this._serializedSize = serializedSize;\n  }\n\n  toJSON() {\n    if (!this._json) {\n      this._json = Object.freeze({\n        data: this.data,\n        links: this.links.map(l => l.toJSON()),\n        size: this.size\n      });\n    }\n\n    return Object.assign({}, this._json);\n  }\n\n  toString() {\n    return \"DAGNode <data: \\\"\".concat(this.data.toString('base64'), \"\\\", links: \").concat(this.links.length, \", size: \").concat(this.size, \">\");\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  set data(data) {\n    throw new Error(\"Can't set property: 'data' is immutable\");\n  }\n\n  get links() {\n    return this._links;\n  }\n\n  set links(links) {\n    throw new Error(\"Can't set property: 'links' is immutable\");\n  }\n\n  get size() {\n    if (this._size === undefined) {\n      this._size = this.links.reduce((sum, l) => sum + l.size, this._serializedSize);\n    }\n\n    return this._size;\n  }\n\n  set size(size) {\n    throw new Error(\"Can't set property: 'size' is immutable\");\n  }\n\n}\n\nexports = module.exports = withIs(DAGNode, {\n  className: 'DAGNode',\n  symbolName: '@ipld/js-ipld-dag-pb/dagnode'\n});\nexports.create = require('./create');\nexports.clone = require('./clone');\nexports.addLink = require('./addLink');\nexports.rmLink = require('./rmLink');","map":null,"metadata":{},"sourceType":"script"}